#+TITLE: Searching
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}/.local/emacs/site-lisp
#+PROPERTY: header-args+ :tangle config-searching.el

#+begin_src elisp
(provide 'config-searching)
#+END_SRC

* Custom consult ripgrep functions
#+begin_src elisp 
(defmacro def-consult-rg (name &rest plist)
  (let ((directories (plist-get plist :directories))
        (matches (plist-get plist :matches))
        (options (plist-get plist :options)))
    `(defun ,(intern (concat "consult-rg-" (symbol-name name))) ()
       (interactive)
       (let* ((directories ,(if (symbolp directories)
                                directories
                              (cons 'list directories)))
              (default-directory (car directories))
              (orig-builder (symbol-function 'consult--ripgrep-builder))
              (extra-options (append 
                              ,(cons 'list options)
                              (cl-loop for opt in ,(cons 'list matches)
                                       append (list "-g" opt))
                              (cdr directories))))
         (cl-letf (((symbol-function 'consult--ripgrep-builder)
                    (lambda (input)
                      (let ((results (funcall orig-builder input)))
                        (plist-put results
                                   :command
                                   (append (plist-get results :command)
                                           extra-options))))))
           (command-execute #'consult-ripgrep))))))

#+END_SRC

** TODO Submit PR for the extra directories feature ^

* RG Consult
#+begin_src elisp 
(def-consult-rg info
  :directories Info-directory-list
  :options ("-z")
  :matches ("**/*info" "**/*info.gz"
            "**/*info?" "**/*info?.gz"
            "**/*info??" "**/*info??.gz"))

(def-consult-rg emacs-lisp-src
  :directories ((expand-file-name "~/.local/emacs/site-lisp/")
                (substitute-in-file-name "$p/emacs-lisp-src/")
                (expand-file-name "~/.local/emacs/site-lisp/")
                "/usr/share/emacs/site-lisp/"
                "")
  :matches ("**/*.el" "**/README*" "**/*.org"))

(def-consult-rg dotfiles 
  :directories ((substitute-in-file-name "$dot")))
#+end_src

* Keymapping
#+begin_src elisp
(define-leader! search "H-/")
(keymap! :search
         (:after consult
                 "/" #'consult-ripgrep
                 "l" #'consult-line
                 "i" #'consult-rg-info
                 "e" #'consult-rg-emacs-lisp-src
                 "d" #'consult-rg-dotfiles))
#+end_src

