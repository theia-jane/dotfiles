#+TITLE: elisp
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}/.local/emacs/site-lisp

* Extras
:PROPERTIES:
:header-args+: :tangle config-elisp.el
:END:
Extra elisp functionality that I find useful.
** Expressions
Allow for finding outermost sexps
#+BEGIN_SRC elisp
(defun beginning-of-sexp-p ()
  "Test if the point is at the beginning of a sexp."
  (= (point)
     (save-excursion
       (end-of-sexp)
       (beginning-of-sexp)
       (point))))

(defun outermost-list (&optional escape-strings no-syntax-crossing)
  "Move point to the end of the outermost list relative to the current point."
  (interactive "d\nd")
  ;; Don't ignore scan-error if we start at the wrong spot
  (up-list 1 escape-strings no-syntax-crossing)
  (ignore-error scan-error
    (cl-loop (up-list 1 escape-strings no-syntax-crossing))))

(defun end-of-outermost-sexp ()
  (interactive)
  (ignore-error scan-error
    (outermost-list t nil))
  (if (beginning-of-sexp-p)
      (end-of-sexp)))
#+END_SRC

** Evaluation
Allow for different functions for eval-ing the sexp before the point.
#+begin_src elisp
(defvar elisp-eval-last-sexp-function #'eval-last-sexp)
#+end_src

Evaluate the sexp under the point (rather than needing to be at the end of the sexp).
#+BEGIN_SRC elisp
(defun eval-sexp-under-point (eval-last-sexp-arg-internal)
  (interactive "P")
  (with-syntax-table emacs-lisp-mode-syntax-table
    (save-excursion
      (end-of-sexp)
      (funcall elisp-eval-last-sexp-function eval-last-sexp-arg-internal))))
#+END_SRC

Adding evals for outer most sexp. Useful for =defun= and =let='s and the like.
#+BEGIN_SRC elisp
(defun eval-outermost-sexp (eval-last-sexp-arg-internal)
  "Evaluate outermost sexp, this utilizes the `elisp-eval-last-sexp-function'"
  (interactive "P")
  (with-syntax-table emacs-lisp-mode-syntax-table
    (save-excursion
      (end-of-outermost-sexp)
      (funcall elisp-eval-last-sexp-function eval-last-sexp-arg-internal))))

#+END_SRC

Helper function that let's me eval elisp in a notebook like fashion. I've not added any keybindings in the package definition here, but there are some in my doom config.
#+BEGIN_SRC elisp
(defun eval-outermost-sexp-and-continue (eval-last-sexp-arg-internal)
  "Attempts to evaluate outermost sexp. If it fails, move to next sexp.
This utilizes the `elisp-eval-last-sexp-function'."
  (interactive "P")
  (with-syntax-table emacs-lisp-mode-syntax-table
    (ignore-error end-of-file
      (eval-outermost-sexp eval-last-sexp-arg-internal))
    (end-of-outermost-sexp)
    (forward-sexp)
    (beginning-of-sexp))
  (recenter nil t))
#+END_SRC
** Eros 
Add a nice overlay when executing emacs lisp
#+begin_src elisp
(config! eros
         (setq elisp-eval-last-sexp-function #'eros-eval-last-sexp)
         (add-hook 'emacs-lisp-mode-hook 'eros-mode))
#+end_src
** Keybinding
#+begin_src elisp
;; Key-bindings
(keymap!
 (:map ctl-x-map
   ;; Replace 'elisp-eval-last-sexp-function
   :desc "Eval outermost sexp" "C-e" #'eval-outermost-sexp
   ;; Move 'elisp-eval-last-sexp-function
   "C-S-e" #'(lambda () (interactive) (funcall elisp-eval-last-sexp-function)))
 (:map emacs-lisp-mode-map
   :desc "Eval outermost sexp" "<S-return>" #'eval-outermost-sexp
   "<C-return>" #'eval-outermost-sexp-and-continue))
#+end_src
** Hacks 
Evil doesn't play really well with some elisp navigating function... This corrects for it. Probably should push some of this upstream
#+begin_src elisp
(after! evil
    (defun evil/is-emulated-eol? ()
        "Determines if the point's current position is an emulated eol."
        (and (or (evil-normal-state-p)
                (evil-operator-state-p))
            (= (1+ (point))
                (line-end-position))))

    (defvar evil--should-correct-for-eol nil)

    (defadvice! evil/correct-eol--advice (fn &rest args)
        "Corrects the emulate eol for low level sexp / list functions.
This behavior is opt in only. Set '+evil--correct-eol--advice to t to
apply the correction."
        :around '(forward-sexp up-list)
        (when (and evil--should-correct-for-eol (evil/is-emulated-eol?))
        (forward-char))
        (apply fn args))

    (defadvice! elisp/correct-evil-emulate-eol (fn &rest args)
        "Outside of the emulated eol with forward sexp"
        :around '(beginning-of-sexp-p
                end-of-sexp-p
                outermost-list
                end-of-outermost-sexp
                eval-outermost-sexp
                eval-outermost-sexp-and-continue)
        (let ((evil--should-correct-for-eol t))
        (apply fn args))))
#+end_src
** Footer
#+BEGIN_SRC elisp
(provide 'config-elisp)
#+END_SRC
