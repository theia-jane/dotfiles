#+TITLE: UI
#+PROPERTY: header-args :tangle-relative 'dir
#+PROPERTY: header-args:elisp :tangle config-ui.el :dir ${HOME}/.local/emacs/site-lisp/

#+BEGIN_SRC elisp
(provide 'config-ui)
#+END_SRC
* Mode bar
I don't like the clutter of the menu, toolbar and scroll bar.
#+BEGIN_SRC elisp
(menu-bar-mode -1)
(when (display-graphic-p)
  (scroll-bar-mode -1)
  (tool-bar-mode -1))
#+END_SRC
** Android
#+begin_src elisp
(when (and (string-equal system-type "android")
           (display-graphic-p))
  (tool-bar-mode)
  (modifier-bar-mode)
  (menu-bar-set-tool-bar-position 'bottom)
  (setq secondary-tool-bar-map
        `(keymap
          (control menu-item "C-"
                   event-apply-control-modifier
                   :help "Add Control modifier to the following event"
                   :image (image :type png
                                 :file ,(expand-file-name "~/.local/emacs/images/control.png")
                                 :scale default)
                   :enable (modifier-bar-available-p 'control))
          (meta menu-item "M-"
                event-apply-meta-modifier
                :help "Add Meta modifier to the following event"
                :image (image :type png
                              :file ,(expand-file-name "~/.local/emacs/images/meta.png")
                              :scale default)
                :enable (modifier-bar-available-p 'meta))
          (hyper menu-item "H-"
                 event-apply-hyper-modifier
                 :help "Add Hyper modifier to the following event"
                 :image (image :type png
                               :file ,(expand-file-name "~/.local/emacs/images/hyper.png")
                               :scale default)
                 :enable (modifier-bar-available-p 'hyper))
          (hyper menu-item "S-"
                 event-apply-super-modifier
                 :help "Add Super modifier to the following event"
                 :image (image :type png
                               :file ,(expand-file-name "~/.local/emacs/images/super.png")
                               :scale default)
                 :enable (modifier-bar-available-p 'super)))))
#+end_src
* Disable
I'd like to disable the startup screen and echo message 'site' wide... Generally not 'right', but I'm the only one using my system, so I'll break the rules by overwritting the functions.
#+BEGIN_SRC elisp
(defun fancy-startup-screen (&rest _))
(defun display-startup-echo-area-message (&rest _))
#+END_SRC

Turn off the bell
#+BEGIN_SRC elisp
(setq ring-bell-function #'ignore)
#+END_SRC

* Fonts
#+begin_src elisp
(set-face-attribute 'default nil
                    :font "Source Code Pro"
                    :height 100)

#+end_src
** Android
#+begin_src elisp
(when (string-equal system-type "android")
  (set-face-attribute 'default nil
                      :font "Source Code Pro-15"))
#+end_src
* Frame
#+begin_src elisp
(require 'dash)
(defun selected-display ()
  (frame-monitor-attributes))

(defun calculate-default-frame-geometry ()
  (cl-destructuring-bind
      (x y width height) (alist-get 'workarea (selected-display))
    (let ((frame-width (/ width  2))
          (frame-height (* 2 (/ height 3))))
      (list (+ (/ (- width frame-width) 2) x)
            (+ (/ (- height frame-height) 2) y)
            (/ frame-width (frame-char-width))
            (/ frame-height (frame-char-height))))))

(defun set-frame-default-geometry (&optional frame)
  (message "Trying to set frame")
  (let ((frame (or frame (selected-frame))))
    (message "Selected %s" frame)
    (when (display-graphic-p frame)
      (message "Setting for %s" frame)
      (cl-destructuring-bind (x y w h)
          (calculate-default-frame-geometry)
        (set-frame-size frame w h)
        (set-frame-position frame x y)))))

(defun ui-frame-init-variables (&optional frame &rest _)
  (when (display-graphic-p (or frame (selected-frame)))
    (cl-destructuring-bind (x y width height) (calculate-default-frame-geometry)
      (push `(width . ,width) default-frame-alist)
      (push `(height . ,height) default-frame-alist)
      (push `(top . ,y) default-frame-alist)
      (push `(left . ,x) default-frame-alist)

      (push `(width . ,width) default-frame-alist)
      (push `(height . ,height) default-frame-alist)
      (push `(top . ,y) default-frame-alist)
      (push `(left . ,x) default-frame-alist)

      (push `(width . ,width) initial-frame-alist)
      (push `(height . ,height) initial-frame-alist)
      (push `(top . ,y) initial-frame-alist)
      (push `(left . ,x) initial-frame-alist))
    (set-frame-default-geometry frame)
    (remove-hook 'server-after-make-frame-hook #'ui-frame-init-variables)
    (add-hook 'after-make-frame-functions #'set-frame-default-geometry)
    (add-hook 'server-after-make-frame-hook #'set-frame-default-geometry)))

(if (daemonp)
    (add-hook 'server-after-make-frame-hook #'ui-frame-init-variables)
  (ui-frame-init-variables))
#+end_src


* Non-program buffers
#+begin_src elisp
(defun ui/non-code--display-hook ()
  (setq display-line-numbers nil
        left-margin-width 5
        right-margin-width 5
        header-line-format " "
        line-spacing 14
        fill-column 80)
  (pcase major-mode
    (org-mode (when (featurep 'config-org) (org-latex-preview-buffer))))
  (if (> (line-number-at-pos (point-max)) 1500)
      (pcase major-mode
        ;; Is there an earlier point I can set this up at? Seems like it isn't as effective as #+STARTUP: overview
        (org-mode (org-overview)))))

(add-hook 'org-mode-hook #'ui/non-code--display-hook)
#+end_src

* Program buffers
#+begin_src elisp
(defun ui/code--display-hook ()
  (setq line-spacing 7))
(add-hook 'prog-mode-hook #'ui/code--display-hook)
#+end_src

* Helpers
#+BEGIN_SRC elisp
(defmacro set-face-attributes! (&rest attributes-list)
  `(seq-do #'(lambda (attributes)
            (apply #'set-face-attribute (car attributes) nil (cdr attributes)))
          ',attributes-list))
#+END_SRC

* Themes
:PROPERTIES:
:header-args:elisp+: :tangle config-ui-themes.el
:END:

#+begin_src elisp
(provide 'config-ui-themes)
#+end_src
** Gruvbox
#+begin_src elisp
(config! gruvbox
  (load-theme 'gruvbox t))
#+end_src

* Keys
#+begin_src elisp
'(setup-new-prefix-key 'ui "H-u")
'(map-prefix-keys 'ui
 "+" #'text-scale-increase
 "-" #'text-scale-decrease
 "0" (cmd (text-scale-set 0)))
#+end_src
