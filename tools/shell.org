#+TITLE: Shell
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}
#+STARTUP: overview

* Environment variables
:PROPERTIES:
:header-args+: :tangle .environment
:END:
#+BEGIN_SRC bash
export OS="$(uname | tr "[A-Z]" "[a-z]")"
export notes="${HOME}/notes"
export docs="${HOME}/Documents"
export org="${HOME}/org"
export p="${HOME}/Repositories"
export dot="$p/theia-jane/dotfiles"
export cfg="${HOME}/.config"
export lcl="${HOME}/.local"
export cfg_sh="${cfg}/sh"
export cfg_emacs="${dot}/tools/emacs"
export DOOMDIR="${cfg_emacs}/doom"
export PERSONAL_EMACS_PACKAGES="$(find "$cfg_emacs/packages" -maxdepth 1 -type d  -exec realpath {} \; | tr '\n' ':')"
export EMACSLOADPATH="${lcl}/emacs/site-lisp:${PERSONAL_EMACS_PACKAGES}"

PATH="${HOME}/bin:${HOME}/.local/bin:${dot}/bin:${PATH}"
export PATH="$(clean-path "$PATH")"

if [ ! -z "$(which emacsdclient)" ]; then
  EDITOR="emacsdclient -c"
elif [ ! -z "$(which nvim)" ]; then
  EDITOR="${EDITOR:-nvim}"
fi
export EDITOR="${EDITOR:-vim}"

export TEXMFHOME="${cfg}/texmf"
#+END_SRC

* Scripts
:PROPERTIES:
:header-args+: :dir ${HOME}/bin :shebang #!/usr/bin/env bash
:END:
** With environment
#+begin_src bash :tangle with-env 
if [ ! -e "$1" ]; then
    DIR="${HOME}/.local/environment"
    if [ -d "$DIR" ]; then
        cd $DIR
    fi

    if [ ! -e "$1" ]; then
        echo "Invalid environment file" >&2
        exit 0
    fi
fi
FILE="$1"
shift

EXPORTS=""
while read -r LINE; do
    ASSIGNMENT="$(echo "$LINE" \
                    | sed -nr '/[^=]+=".*"[[:space:]]*$/s/(^[[:space:]]*)|(^[[:space:]]*)$//p')"
    if [ ! -z "$ASSIGNMENT" ]; then
        EXPORTS="$(echo -en "${EXPORTS}\nexport ${ASSIGNMENT}")"
    fi
done <<< "$(cat "$FILE")" 

if [ -z "$@" ]; then
    echo eval "$EXPORTS"
else
    eval "$EXPORTS"
    eval "$@"
fi
#+end_src
#+begin_src bash :tangle with-envs 
for e in $@; do 
    with-env "$e"
done
#+end_src
** Clean path
Script to clean up a path variable. Basically to avoid the path variable from getting messy. Not usually an issue, but occassionally it gets noisy and I like to keep it clean
#+begin_src bash :tangle clean-path
usage() {
    cat <<EOF
Usage: clean-path [path]

Where [path] is the string value of a path
EOF
}

[ -z "$1" ] && usage >&2 && exit 1

python <<PY
path = "$1"
clean_path = []

for p in path.split(":"):
    if p not in clean_path:
       clean_path.append(p)

print(":".join(clean_path))
PY
#+end_src
* Profile
:PROPERTIES:
:header-args+: :tangle .profile
:END:
#+BEGIN_SRC bash
. ~/.environment

ENV_DIR="$cfg/env"
if [ -d "${ENV_DIR}" ]; then
  for env_file in $(ls "${ENV_DIR}"); do
		source "${ENV_DIR}/${env_file}"
	done
fi

SHELL_NAME="$(echo $SHELL | tr '/' ' ' | awk '{print $(NF)}')"
#+END_SRC
* Shells
** bash
#+BEGIN_SRC bash :tangle .bashrc
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
shopt -s histappend                      # append to history, don't overwrite it

# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
function p() {
    $(cd "$p/$1" && {
        dir="$(fd -HI '\.git$' -t d | sed -r 's%(.*)/[.]git/%\1%' | fzf --reverse --height 10%)" 
        printf 'builtin cd -- %q' "$(pwd)/$dir"
    })
}
complete -W "$(cd $p && \
for dir in $(fd . -d 1 -t d); do
    [ -z "$(cd $dir && fd '\.git$' -t d -d 1)" ] && echo "$dir" | sed 's%/%%'
done)" p

BASH_COMP="/usr/share/bash-completion/bash_completion"
[ -e "${BASH_COMP}" ] && source $BASH_COMP
#+END_SRC

#+begin_src bash :tangle .bash_profile
source_list="${HOME}/.profile
${HOME}/.bashrc"

for file in $source_list; do
    [[ -f $file ]] && source $file
done
#+end_src

** zsh
:PROPERTIES:
:header-args+: .zshrc
:END:
*** Options
#+BEGIN_SRC bash
autoload -U compinit
compinit

HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
setopt APPEND_HISTORY # Don't erase history
setopt EXTENDED_HISTORY # Add additional data to history like timestamp
setopt INC_APPEND_HISTORY # Add immediately
setopt HIST_SAVE_NO_DUPS # Don't save any duplicates
setopt NO_HIST_BEEP # Don't beep
setopt SHARE_HISTORY # Share history between session/terminals
#+END_SRC
*** Keybinds
#+BEGIN_SRC bash
bindkey "\C-f" history-incremental-search-forward
bindkey "\C-r" history-incremental-search-backward

bindkey "\C-n" down-line-or-history
bindkey "\C-p" up-line-or-history

autoload -U edit-command-line
zle -N edit-command-line
bindkey "\C-x\C-e" edit-command-line
#+END_SRC
*** Plugins
#+BEGIN_SRC bash
[ ! -f ~/.antigen.zsh ] && curl -L git.io/antigen > ~/.antigen.zsh
source ~/.antigen.zsh
antigen bundle cusxio/delta-prompt > /dev/null
antigen bundle zsh-users/zsh-syntax-highlighting > /dev/null
antigen apply
#+END_SRC
