#!/usr/bin/env -S emacs -Q --script # -*- mode: emacs-lisp; lexical-binding: t; -*-
;; [[file:../config-cli.org::*Tangle][Tangle:1]]
(when (and (not (featurep 'config-android))
           (string-equal system-type "android"))
  (defvar android-termux-home "/data/data/com.termux/files/home")
  (setenv "HOME" android-termux-home)
  
  (defvar android-termux-bin "/data/data/com.termux/files/usr/bin")
  (setenv "PATH" (format "%s:%s" android-termux-bin (getenv "PATH")))
  (push android-termux-bin exec-path)
  
  (defvar android-termux-shell (concat android-termux-bin "/bash"))
  (setenv "SHELL" android-termux-shell)
  (setq shell-file-name android-termux-shell))
(require 'subr-x)
(require 'rx)

(defvar config-root (replace-regexp-in-string "bin/[^/]+$" "" load-file-name))
(defvar config-dry-run nil)
(defvar config-clean nil)
(defvar config-tangle-exclude-patterns 
  '("README" "^tools/emacs/file-templates"))
(defvar config-tangle-include-patterns 
  `(,(rx line-start
         (or "literate/"
             "tools/"
             (and (+ (not "/")) ".org")))))

(while argv
  (setq arg (pop argv))
  (pcase arg
  ("--exclude" (when argv
    (add-to-list 'config-tangle-exclude-patterns (pop argv))))
  ("--include" (when argv
    (add-to-list 'config-tangle-include-patterns (pop argv))))
  ("--dry-run" (setq config-dry-run t))
  ("--clean" (setq config-clean t))
  (_ (message "Unknown argument: %s" arg))))

(require 'package-utils
         (concat config-root "tools/emacs/packages/package-utils/package-utils.el"))

(update-repo-load-path)

(require! ob-tangle
          ob-extended-tangle
          ob-text-var-expansion
          ob-load-namespaced-libraries
          ob-var-table
          notifications)
;; Tangle:1 ends here

;; [[file:../config-cli.org::*Tangle][Tangle:2]]
(require 'obt-cache)
(setq obt-cache-enabled t
      obt-cache-store-path (concat config-root "/build/config-tangle-cache.el"))
(obt-cache-store-init config-clean)

(require 'ob-lob-cache)
(setq ob-lob-cache-enabled t
      ob-lob-cache-store-path (concat config-root "/build/config-lob-cache.el"))
(ob-lob-cache-store-init config-clean)
;; Tangle:2 ends here

;; [[file:../config-cli.org::*Tangle][Tangle:3]]
(setq org-babel-default-header-args `((:session         . "none")
                                      (:noweb           . "yes")
                                      (:root-dir        . ,config-root)
                                      (:mkdirp          . "yes")
                                      (:tangle-relative . dir)
                                      (:tangle          . "no")
                                      (:comments        . "yes")))
;; Tangle:3 ends here

;; [[file:../config-cli.org::*Tangle][Tangle:4]]
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)
      (emacs-lisp . t)))
;; Tangle:4 ends here

;; [[file:../config-cli.org::*Tangle][Tangle:5]]
(add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p)
;; Tangle:5 ends here

;; [[file:../config-cli.org::*Tangle][Tangle:6]]
(defun config-file-filter (file)
  (and
   (not 
    (seq-reduce 
     (lambda (carry pattern) 
       (or carry (string-match-p pattern file)))
     config-tangle-exclude-patterns
     nil))
   (seq-reduce 
    (lambda (carry pattern) 
      (and carry (string-match-p pattern file)))
    config-tangle-include-patterns
    t)))

(defun config-files ()
  (seq-filter
   #'config-file-filter
   (mapcar 
    (apply-partially #'string-remove-prefix (file-name-as-directory config-root))
    (directory-files-recursively config-root "\\.org$"))))

(defun config-tangle ()
  (let ((default-directory config-root)
        (files (config-files)))
    (message "Tangling files: \n%s\n" 
             (mapconcat (apply-partially #'concat "  ") files "\n"))

    (if config-dry-run
        (message "This was a dry run. Nothing was tangled.")
      (with-ob-global-lib
       (ob-make-lib-from-files files t (apply-partially #'string-remove-suffix ".org"))
       (ob-tangle-files files))
      (notifications-notify :title "Config tangled"
                            :timeout 1500))))

(config-tangle)

(kill-emacs 0)
;; Tangle:6 ends here
