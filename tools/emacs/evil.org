#+TITLE: Evil
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}/.local/emacs/site-lisp

* Config
:PROPERTIES:
:header-args+: :tangle config-evil.el
:END:

#+begin_src elisp
(provide 'config-evil)

(init! evil
       (setq evil-want-integration t
             evil-respect-visual-line-mode t
             evil-want-keybinding nil))

(config! evil
         (evil-mode)
         (require! evil-register))

(config! (evil evil-collection)
         (evil-collection-init))

(config! (evil evil-surround)
         (global-evil-surround-mode 1))

(config! (evil evil-exchange)
         (evil-exchange-install))

(keymap!
 (:after evil-args
         :textobj "a" #'evil-inner-arg #'evil-outer-arg)
 (:after evil
         :map evil-motion-state-map "RET" nil)
 (:after evil-numbers
         :map evil-normal-state-map
         "g-" #'evil-numbers/dec-at-pt
         "g=" #'evil-numbers/inc-at-pt))

#+end_src
** Next file 
#+begin_src elisp
;;; ]f / [f
(defun evil--next-file (n)
  (unless buffer-file-name
    (user-error "Must be called from a file-visiting buffer"))
  (let* ((directory (file-name-directory buffer-file-name))
         (filename (file-name-nondirectory buffer-file-name))
         (files (f-glob "[!.]*" (file-name-directory buffer-file-name)))
         (index (cl-position filename files :test #'file-equal-p)))
    (when (null index)
      (user-error "Couldn't find this file in current directory"))
    (let ((index (+ index n)))
      (cond ((>= index (length files))
             (user-error "No files after this one"))
            ((< index 0)
             (user-error "No files before this one"))
            ((expand-file-name (nth index files) directory))))))

;;;###autoload
(defun evil/next-file (count)
  "Open file following this one, alphabetically, in the same directory."
  (interactive "p")
  (find-file (evil--next-file count)))

;;;###autoload
(defun evil/previous-file (count)
  "Open file preceding this one, alphabetically, in the same directory."
  (interactive "p")
  (find-file (evil--next-file (- count))))

(keymap! 
      :n  "]f"    #'evil/next-file
      :n  "[f"    #'evil/previous-file)
#+end_src

#+RESULTS:

** TODO Bufler
This should be merged into evil-collection
#+begin_src emacs-lisp
(after! (evil-collection bufler)
        (defconst evil-collection-bufler-maps '(bufler-list-mode-map))
        (defun evil-collection-bufler-setup ()
          "Set up `evil' bindings for `bufler'.."
          (evil-set-initial-state 'bufler-mode 'normal)

          (evil-collection-define-key 'normal 'bufler-list-mode-map
            "gr" 'bufler
            "x" 'bufler-list-buffer-kill
            "?" 'hydra:bufler/body
            (kbd "SPC") 'bufler-list-buffer-peek
            (kbd "TAB") 'magit-section-toggle))

        (evil-collection-bufler-setup))
#+end_src
