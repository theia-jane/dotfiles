#+TITLE: Config Tangle
#+PROPERTY: header-args :tangle bin/config-tangle :tangle-relative 'dir :noweb yes :comments yes
#+STARTUP: overview

This project will exclusively utilize emacs org-mode's capability to tangle files, which creates files based on the source code blocks within an =.org=. This is ultimately what enables [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].

To start we need to setup of the script to run using emacs-lisp.
#+BEGIN_SRC sh :shebang #!/usr/bin/env sh :comments no
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
#+END_SRC


We need to pull in the org babel library for tangling and an extension to tangling, which enables flexibility in relative tangling.
#+BEGIN_SRC elisp
(add-to-list 'load-path
             (replace-regexp-in-string "bin/[^/]+$"
                                       "tools/emacs/packages/"
                                       load-file-name))

(require 'ob-tangle)
(require 'ob-extended-tangle)
(require 'ob-text-var-expansion)
(require 'ob-load-namespaced-libraries)
(require 'ob-var-table)
#+END_SRC

Now we can tangle! The default behavior tangles files relatively to the org file being tangled. I don't want to litter my literate config with the output files. To accomplish that with the default behavior I have two options: use a bunch of =../../..= when naming the files I tangle /or/ using absolute file paths. I don't really like either options, so I'll be using my custom org-babel source header, =:tangle-relative= which let's enables me to specify where to tangle the file relatively.

For my literate config I want to have the default tangle directory to from the to be the root of this repository, which this will set up.
#+BEGIN_SRC elisp
(defvar config-root (with-temp-buffer
                      (shell-command "git rev-parse --show-toplevel" (current-buffer))
                      (replace-string "\n" "")
                      (buffer-string)))

(setq org-babel-default-header-args `((:session         . "none")
                                      (:noweb           . "yes")
                                      (:root-dir        . ,config-root)
                                      (:mkdirp          . "yes")
                                      (:tangle-relative . dir)
                                      (:tangle          . "no")
                                      (:comments        . "yes"))
      org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

I want my tangled scripts to automatically be executable, so I'll make sure it's executable when I save it.
#+begin_src elisp
(add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p)
#+end_src

Finally, actually tangle the files that in the =literate/= & =tools/=
#+BEGIN_SRC elisp
(defun config-file-filter (file)
  (and
   (not (string-match (rx "mail.org" line-end) file))
   (string-match
    (rx line-start
        (eval (file-name-as-directory config-root))
        (or "literate/"
            "tools/"
            (and (+ (not "/")) ".org")))
    file)))

(defun config-files ()
  (seq-filter
   #'config-file-filter
   (directory-files-recursively config-root "\\.org$")))

(defun config-tangle ()
  (let ((files (config-files)))
    (message "Tangling files: %s" files)
    (with-ob-global-lib
     (ob-make-lib-from-files files t (lambda (file)
                                  (setq file (string-remove-prefix (file-name-as-directory config-root) file))
                                  (string-remove-suffix ".org" file)))
     (ob-tangle-files files))))

(config-tangle)

(kill-emacs 0)
#+END_SRC
