#+TITLE: Bootstrap

This helps support switching between different configurations.
There are some very interesting configuration distributions or
even just other's dotfiles that I'd like to try or 
get some inspiration from.
* Refactor
Considering refactoring the config management to be like 
='use-package=. I'd like it to be as simple as possible
to switch and maintain multiple config repos locally.
If it ends up being simple enough, then I might package
it up.
#+BEGIN_EXAMPLE emacs-lisp
(defvar configs-list ())
(defun use-config (config-plist)
  (push config-plist configs-list))

(use-config '(:name "personal"))
#+END_EXAMPLE 
* Config variants
  Register init functions, for a config to be valid it needs one of these even 
  if it is a no-op.
  #+BEGIN_SRC emacs-lisp
        (setq config-init-alist
              '((personal . init-personal)
                (spacemacs . init-spacemacs)
                (doom . init-doom)))
  #+END_SRC
  
  For other's config repositories it's useful to have a mapping 
  between them, so I can pull them down automatically if I haven't
  on the system I'm on.
  #+BEGIN_SRC emacs-lisp
    (setq config-repo-alist
          '((spacemacs . "https://github.com/syl20bnr/spacemacs")
            (doom . "https://github.com/hlissner/doom-emacs"))) 
  #+END_SRC
  

  #+BEGIN_SRC emacs-lisp
    (setq config-setup-alist
          '((doom . setup-doom)))  
  #+END_SRC
** Personal 
    #+BEGIN_SRC emacs-lisp
    (defun init-personal ()
	(org-babel-load-file "~/.config/personal/dotfiles/emacs/index.org"))
    #+END_SRC
** Spacemacs
   #+BEGIN_SRC emacs-lisp
     (defun init-spacemacs ()
         (load (expand-file-name "init.el" user-emacs-directory))) 
   #+END_SRC
** Doom
   #+BEGIN_SRC emacs-lisp
     (defun init-doom ()
         (load (expand-file-name "init.el" user-emacs-directory))) 
   #+END_SRC
* Get config name 
  #+BEGIN_SRC emacs-lisp
    (setq config-flag-file "/tmp/use-emacs-config") 
  #+END_SRC

  Function that returns whatever is in our =config-flag-file=
  if there is nothing there, then just use personal.

  #+BEGIN_SRC emacs-lisp
    (defun get-config-name ()
      "Returns the config name"
      (if (file-exists-p config-flag-file)
          (with-temp-buffer
            (insert-file-contents config-flag-file)
            (buffer-string))
        (progn
          (message "No config-flag-file found. Continuing with personal")
          "personal")))
  #+END_SRC

* Valid config
#+BEGIN_SRC emacs-lisp
  (defun config-is-valid (config-name)
    (if (alist-get (intern config-name) config-init-alist) t nil))

#+END_SRC 
* Set config
    #+BEGIN_SRC emacs-lisp
      (defun config-set-use (config-name)
        (if (config-is-valid config-name) (write-region config-name nil config-flag-file)))
    #+END_SRC
  
  #+BEGIN_EXAMPLE emacs-lisp
  (config-set-use "personal")
  #+END_EXAMPLE
* Set up emacs.d  
  We need to setup a new emacs.d
  #+BEGIN_SRC emacs-lisp
    (defun config-setup (config-name config-dir)
      (make-directory config-dir t)
      ;; If we have a repo path, then pull down the repo
      (setq repo-path (alist-get (intern config-name) config-repo-alist))
      (if repo-path 
          (shell-command (concat "git clone " repo-path " " config-dir)))
      ;; If we have a setup function, call it
      (setq setup-func (alist-get (intern config-name) config-setup-alist))
      (if setup-func (funcall setup-func))) 
  #+END_SRC
** TODO Refactor all these a lists into one alist with values as plists with properties like: ":setup, :repo-url, :init"
** Doom
   #+BEGIN_SRC emacs-lisp
   
   #+END_SRC 
* Switch emacs.d 
  #+BEGIN_SRC emacs-lisp
    (defun get-config-dir (config-name)
      (concat (expand-file-name "~/.config/personal/emacsds/") config-name)) 
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (defun config-link-emacsd (config-name)
      (setq config-dir (get-config-dir config-name))
      (if (not (file-exists-p config-dir)) (config-setup config-name config-dir)
      (if (file-symlink-p "~/.emacs.d") 
      (delete-file "~/.emacs.d")
      (delete-directory "~/.emacs.d" t))
      (make-symbolic-link config-dir "~/.emacs.d" t)))
  #+END_SRC
* Update emacs.d 
  #+BEGIN_SRC emacs-lisp
    (defun config-magit-status ()
      (interactive)
      (setq config-dir (get-config-dir (get-config-name))
      (magit-status config-dir)))
  #+END_SRC
* Init 
  Attempts to get the function for our =config-name=. If an init
  function exists, call it. Otherwise, we call =#'init-personal=
  #+BEGIN_SRC emacs-lisp
    (setq config-name (get-config-name)
          config-init-func (alist-get (intern config-name) config-init-alist))

    (config-link-emacsd config-name)

    (if config-init-func 
        (funcall config-init-func)
      (progn 
        (message "No config-init-func found. Using init-personal")
        (init-personal)))
  #+END_SRC

* Environment
** From Shell
   #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config
      (setq exec-path-from-shell-check-startup-files nil)
      (defun source-file-and-get-envs (filename)
	(let* ((cmd (concat ". " filename "; env"))
	       (env-str (shell-command-to-string cmd))
	       (env-lines (split-string env-str "\n"))
	       (envs (mapcar (lambda (s) (replace-regexp-in-string "=.*$" "" s)) env-lines)))
	  (delete "" envs)))
      (exec-path-from-shell-copy-envs (source-file-and-get-envs "~/.profile")))
   #+END_SRC
** Emacs
   #+BEGIN_SRC emacs-lisp
     (setq
      my-config (expand-file-name "~/.config/personal/")
      my-dotfiles (expand-file-name "~/.config/personal/dotfiles/")
      my-org (expand-file-name "~/org/"))
   #+END_SRC
** System Detection
   #+BEGIN_SRC emacs-lisp
     (defun is-system (system-name) (eq system-type system-name))
     (defun is-mac () (is-system 'darwin))
     (defun is-linux () (is-system 'gnu/linux))
     (defun system-cond ()
       (cond ((is-mac) mac)
	     ((is-linux) linux)))
   #+END_SRC
