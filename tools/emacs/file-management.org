#+TITLE: File Management
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}/.local/emacs/site-lisp
#+PROPERTY: header-args+ :tangle config-file-management.el

#+begin_src elisp
(provide 'config-file-management)
#+end_src
* Backups
I don't want backups :)
#+begin_src elisp
(setq create-lockfiles nil
      make-backup-files nil)
#+end_src
* Autosaving
Autosave all the things, in case the unexpected happens (emacs crashes or my machine does). Put all the autosaves in emacs' cache directory
#+begin_src elisp
(setq auto-save-default t
      auto-save-list-file-prefix (concat emacs-cache-directory "autosave/")
      auto-save-file-name-transforms `((".*" ,auto-save-list-file-prefix t)))
#+END_SRC

With this tramp will put all autosaves in a single directory. This supercedes `auto-save-file-name-transforms'
#+begin_src elisp
(after! tramp
  (setq tramp-auto-save-directory (concat emacs-cache-directory "tramp-autosave/")))
#+end_src
* dired
#+begin_src elisp
(config! dired
  (setq dired-dwim-target t
        dired-listing-switches "-l --almost-all --human-readable --group-directories-first --no-group")
  (add-hook 'dired-mode-hook 'dired-hide-details-mode))

(config! dirvish
  (setq dirvish-hide-details t
   dirvish-attributes
        (append
         '(vc-state subtree-state nerd-icons collapse)
         '(git-msg file-time file-size))))

(keymap! :map dired-mode-map
         :n "+" #'dired-create-directory
         :n "g+" #'dired-create-empty-file
         (:after dired-rsync
          :n "gs" #'dired-rsync))
(defun +dired/create-dwim (arg)
  (interactive "P")
  (command-execute
   (if arg
       #'dired-create-empty-file
     #'dired-create-directory)))
#+end_src

* File templates
#+begin_src elisp
(defvar +my/file-templates-dir (substitute-env-vars "$dot/tools/emacs/file-templates/"))
(after! yasnippet
  (add-to-list 'yas-snippet-dirs '+my/file-templates-dir 'append #'eq)
  (yas-reload-all))

;; def-project-mode!
#+end_src

* Encrypted
#+begin_src elisp
(after! epa
  ;; With GPG 2.1+, this forces gpg-agent to use the Emacs minibuffer to prompt
  ;; for the key passphrase.
  (set 'epg-pinentry-mode 'loopback)
  ;; Default to the first secret key available in your keyring.
  (setq-default
   epa-file-encrypt-to
   (or (default-value 'epa-file-encrypt-to)
       (unless (string-empty-p user-full-name)
         (cl-loop for key in (ignore-errors (epg-list-keys (epg-make-context) user-full-name))
                  collect (epg-sub-key-id (car (epg-key-sub-key-list key)))))
       user-mail-address))
   ;; And suppress prompts if epa-file-encrypt-to has a default value (without
   ;; overwriting file-local values).
  (defadvice! +default--dont-prompt-for-keys-a (&rest _)
    :before #'epa-file-write-region
    (unless (local-variable-p 'epa-file-encrypt-to)
      (setq-local epa-file-encrypt-to (default-value 'epa-file-encrypt-to)))))
#+end_src
