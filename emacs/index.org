* Environment
** From Shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell 
      :ensure t
      :config
      (setq exec-path-from-shell-check-startup-files nil)
      (defun source-file-and-get-envs (filename)
	(let* ((cmd (concat ". " filename "; env"))
	       (env-str (shell-command-to-string cmd))
	       (env-lines (split-string env-str "\n"))
	       (envs (mapcar (lambda (s) (replace-regexp-in-string "=.*$" "" s)) env-lines)))
	  (delete "" envs)))
      (exec-path-from-shell-copy-envs (source-file-and-get-envs "~/.profile")))
  #+END_SRC
** Emacs
   #+BEGIN_SRC emacs-lisp
     (setq
      my-dotfiles (expand-file-name "~/.config/personal/dotfiles/")
      my-org (expand-file-name "~/org/"))
   #+END_SRC
** System Detection
   #+BEGIN_SRC emacs-lisp
     (defun is-system (system-name) (eq system-type system-name))
     (defun is-mac () (is-system 'darwin))
     (defun is-linux () (is-system 'gnu/linux))
     (defun system-cond ()
       (cond ((is-mac) mac)
	     ((is-linux) linux)))
   #+END_SRC
* Utilities
** Fuzzy finding
     Fuzzy finding for emacs
     #+BEGIN_SRC emacs-lisp
	 (use-package flx :ensure t)
     #+END_SRC
** Core libraries 
   Add functions for dealing with files, strings and associative data. 
   #+BEGIN_SRC emacs-lisp
     (use-package f :ensure t)
     (use-package s :ensure t)
     (use-package a :ensure t)
     (use-package @ :ensure t)
   #+END_SRC
* Package Setup
    Use the wonderful =use-package= which makes managing packages
    wonderfully simple
    #+BEGIN_SRC emacs-lisp
	(require 'package)
	(package-initialize)
    #+END_SRC

    Add package repositories using https.
    #+BEGIN_SRC emacs-lisp
	(setq package-enable-at-startup nil)
	(setq package-archives '(("org" . "https://orgmode.org/elpa/")
				("gnu" . "https://elpa.gnu.org/packages/")
				("melpa" . "https://melpa.org/packages/")
				("marmalade" . "https://marmalade-repo.org/packages/")))
    #+END_SRC
  
    Make sure =use-package= is installed
    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
    #+END_SRC

* User Interface
** Visual
*** Clean up 
**** Hide GUI 
     I don't really like the menu bars or scroll bars. They are ugly
     and distract from the content.
     #+BEGIN_SRC emacs-lisp
	 (menu-bar-mode 0)
	 (tool-bar-mode 0)
	 (scroll-bar-mode 0)
     #+END_SRC
**** Start screen
     #+BEGIN_SRC emacs-lisp
	 (setq inhibit-startup-screen t)
     #+END_SRC
**** Noises
     Shut up the bell
     #+BEGIN_SRC emacs-lisp 
	 (defun my-bell-function ())
	 (setq ring-bell-function 'my-bell-function)
	 (setq visible-bell nil)
     #+END_SRC
*** Font 
    Set font niceness
    #+BEGIN_SRC emacs-lisp
    (set-default-font "Source Code Pro-14")
    #+END_SRC
*** Color
    #+BEGIN_SRC emacs-lisp
      (use-package darktooth-theme 
       	:ensure t 
       	:config 
       	(load-theme 'darktooth t))
     #+END_SRC
**** Terminal + GUI 
    Example of telling when in terminal (need to still figure out emacs client)
    https://emacs.stackexchange.com/questions/13050/different-theme-for-nw-terminal
    https://emacs.stackexchange.com/questions/2096/different-themes-for-terminal-and-graphical-frames-when-using-emacs-daemon
*** Modeline
    #+BEGIN_SRC emacs-lisp
      (use-package powerline :ensure t)
      (use-package powerline-evil :ensure t
       	:config
       	(powerline-evil-center-color-theme)
       	(setq powerline-default-separator 'slant))
         
    #+END_SRC
** Keybindings
     #+BEGIN_SRC emacs-lisp
       (use-package general :ensure t
         :config
         (general-define-key
          :states '(normal visual insert emacs)
          :prefix "SPC"
          :non-normal-prefix "C-SPC"

          "SPC"   'counsel-M-x
          "f d e" '(lambda () (interactive) (find-file (concat my-dotfiles "emacs/index.org")))
          "f d f" '(lambda () (interactive) (counsel-find-file my-dotfiles))
          "f o f" '(lambda () (interactive) (counsel-find-file my-org))
          "f f" 'counsel-find-file

          "b b" 'ivy-switch-buffer
          ))
     #+END_SRC
* Workspaces
  #+BEGIN_SRC emacs-lisp
    (use-package perspective
	:ensure t
	:config
	(persp-mode t))
  #+END_SRC
* Usability 
** =which-key=
  #+BEGIN_SRC emacs-lisp
    (use-package which-key :ensure t
    :config
    (which-key-mode 1))
  
  #+END_SRC
** Basic File Modes
*** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode :ensure t)
   #+END_SRC
*** matlab / octave
    #+BEGIN_SRC emacs-lisp
    ;(use-package matlab-mode :ensure t)
    #+END_SRC
** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :diminish paredit-mode
  :config
  (dolist
      (mode-hook '(emacs-lisp-mode-hook
		   eval-expression-minibuffer-setup-hook
		   ielm-mode-hook
		   lisp-mode-hook
		   lisp-interaction-mode-hook
		   scheme-mode-hook))
    (add-hook mode-hook #'enable-paredit-mode)))

(use-package evil-paredit :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook 'evil-paredit-mode))
#+END_SRC

** Ivy / Counsel
  #+BEGIN_SRC emacs-lisp
;; Finding / Narrowing / Completing 
(use-package ivy :ensure t
  :diminish ivy-mode
  :config
  (ivy-mode 1)
  ;; clears the intial ^ when using ivy
  (setq ivy-initial-inputs-alist nil
	ivy-re-builders-alist
	 '((ivy-switch-buffer . ivy--regex-plus)
	   (t . ivy--regex-fuzzy)))
  :bind*
  (("C-x b" . ivy-switch-buffer)
   ("C-x C-b" . ivy-switch-buffer))
  :bind (:map ivy-minibuffer-map
	      ("C-n" . ivy-next-history-element)
	      ("C-p" . ivy-previous-history-element)
	      ("C-k" . ivy-previous-line)
	      ("C-j" . ivy-next-line)
	      ))

(use-package counsel :ensure t
  :bind
  (("M-x" . counsel-M-x)
   ("C-x f" . counsel-find-file)))
  
  #+END_SRC
* Applications
** Restclient
     #+BEGIN_SRC emacs-lisp
       (use-package restclient 
         :ensure t)
     #+END_SRC
   
** Slack
   #+BEGIN_SRC emacs-lisp
   ;; (slack-register-team
   ;;  :name ""
   ;;  :default t
   ;;  :client-id ""
   ;;  :client-secret ""
   ;;  :token ""
   ;;  )
   #+END_SRC

** Org
*** Initial 
#+BEGIN_SRC emacs-lisp
;; Org niceness
(use-package org-bullets :ensure t
  :init (add-hook 'org-mode-hook 'org-bullets-mode))
(use-package worf :ensure t
  :init (add-hook 'org-mode-hook 'worf-mode))
;; mapping an associative list
(defun map-alist (f alist)
    (mapcar (lambda (key-val)
	    (setq key (car key-val)
		    val (cdr key-val))
	    (funcall f key val))
	    alist))

;; Map keywords (TODO) to a nicer icon 
(defun org-mode-todo-symbols (todo-alist)
  (setq org-todo-font-lock-replace
	(map-alist (lambda (keyword symbol)
		 `(,(concat "^\\*+ \\(" keyword "\\) ") 
		   (1 (progn (compose-region (match-beginning 1) (match-end 1) ,symbol) nil))))
	       todo-alist))

  (font-lock-add-keywords            
   'org-mode org-todo-font-lock-replace))


(use-package org
  :ensure t
  :config
  (org-mode-todo-symbols
   '(("TODO" . "⚑")
     ("DOING" .  "⚐")
     ("CANCELED" .  "✘")
     ("DONE" .  "✔"))))

#+END_SRC
*** General Vars
    #+BEGIN_SRC emacs-lisp
      (setq
       org-log-into-drawer "logbook"
       org-agenda-files (f-entries my-org (lambda (filename) (s-ends-with-p ".org" filename)) t)
       org-directory "~/org"
       org-modules (append org-modules '(org-drill)))

    #+END_SRC

    #+RESULTS:
    | org-w3m | org-bbdb | org-bibtex | org-docview | org-gnus | org-info | org-irc | org-mhe | org-rmail | org-drill | org-drill |

*** Tasks
    #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
           '((sequence "TODO" "STARTED" "|" "DONE" "CANCELED")))
    #+END_SRC

    #+RESULTS:
    | sequence | TODO | STARTED |   |   | DONE | CANCELED |

*** Babel
    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-confirm-babel-evaluate nil)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (emacs-lisp . t)
         ;;(org . t)
         ;;(js . t)
         ;;(latex . t)
         ;; (php . t)
         ;;(dot . t)
         ;;(shell . t)
         ))
    #+END_SRC

*** Capture
    #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates '(
                                   ("p" "Plain" entry (file "")
                                    "* %?")
                                   ("t" "Todo" entry (file "")
                                    "* TODO %?")
                                   ))
    #+END_SRC

    #+RESULTS:
    | p | Plain | entry | (file ) | * %?      |
    | t | Todo  | entry | (file ) | * TODO %? |

*** Mobile
   #+BEGIN_SRC emacs-lisp
;      (setq org-mobile-inbox-for-pull "~/Nextcloud/org/flagged.org")
;      (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
   #+END_SRC

   #+RESULTS:

*** Refile
    #+BEGIN_SRC emacs-lisp
      (setq org-refile-targets '((nil :maxlevel . 7)
			       	(org-agenda-files :maxlevel . 1))
	    org-refile-allow-creating-parent-nodes t
	    org-outline-path-complete-in-steps nil    ; Refile in a single go
	    org-refile-use-outline-path 'file)        ; Show full paths for refiling
    #+END_SRC

    #+RESULTS:
    : file

*** Latex
    #+BEGIN_SRC emacs-lisp
     (setq org-highlight-latex-and-related '(latex))
    #+END_SRC

    #+RESULTS:
    | latex |

* JSON
#+BEGIN_SRC emacs-lisp
;; Example of loading & parsing some JSON
;; https://emacs.stackexchange.com/questions/27407/accessing-json-data-in-elisp
;; (require 'json)
;; (json-read-file "~/.mappings.json")
#+END_SRC
* General
** Improved repeating
   Extend repeat to be usable in insert mode as well
   #+BEGIN_SRC emacs-lisp
    ;;    (define-key evil-insert-state-map (kbd "C-.") "hello")
   #+END_SRC
** yasnippets
   #+BEGIN_SRC emacs-lisp
   ;;(setq yas-snippet-dirs
    ;;  '(
     ;;   "~/.config/personal/snippets"
      ;;))
   #+END_SRC
** File Writing
   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying-when-linked t)
   #+END_SRC
** Annoying new lines
   #+BEGIN_SRC emacs-lisp
   (setq mode-require-final-newline nil)
   #+END_SRC
** List functions
   #+BEGIN_SRC emacs-lisp
     ;(defun append-to-list (list-var elements)
     ;"Append ELEMENTS to the end of LIST-VAR.
;
     ;The return value is the new value of LIST-VAR."
       ;(unless (consp elements)
         ;(error "ELEMENTS must be a list"))
       ;(let ((list (symbol-value list-var)))
         ;(if list
             ;(setcdr (last list) elements)
           ;(set list-var elements)))
       ;(symbol-value list-var))
   #+END_SRC
* EVIL
  #+BEGIN_SRC emacs-lisp
    (use-package evil :ensure t
      :config
      (evil-mode 1)
      (setq 
       evil-overriding-maps nil
       evil-intercept-maps nil))
  #+END_SRC
** Evil Surround
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :ensure t
       :config
	(global-evil-surround-mode 1))
   #+END_SRC


