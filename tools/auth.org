#+TITLE: Auth
#+PROPERTY: header-args :tangle-relative 'dir

* Pass
** Scripts
:PROPERTIES:
:header-args+: :dir ${HOME}/bin :shebang #!/usr/bin/env bash
:END:
*** pass-menu
#+BEGIN_SRC bash :tangle pass-menu
shopt -s nullglob globstar

typeit=0
if [[ $1 == "--type" ]]; then
	typeit=1
	shift
fi

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )

password=$(printf '%s\n' "${password_files[@]}" | $(fuzzy-ui-provider) "$@")

[[ -n $password ]] || exit

if [[ $typeit -eq 0 ]]; then
	pass show -c "$password" 2>/dev/null
else
	pass show "$password" | { IFS= read -r pass; printf %s "$pass"; } |
		xdotool type --clearmodifiers --file -
fi
#+END_SRC
*** pass-detail
#+begin_src bash :tangle pass-detail
if [ -z "$1" ]; then
    echo "Must provide a secret name" >&2
    exit 0 
fi
PASS_NAME="$1"

if [ -z "$2" ]; then
    # default to the secret alone
    PASS_KEY="secret"
else
    PASS_KEY="$(echo "$2" | tr '[A-Z]' '[a-z]')"
fi

PASS_DETAILS="$(pass "$1")"
PASS_VALUE=""
if [ -z "$PASS_DETAILS" ]; then
   echo "'${PASS_NAME}' is empty" >&2
else
    if [ "${PASS_KEY}" = "secret" ]; then
        PASS_VALUE="$(echo "$PASS_DETAILS" | head -1)"
    else
        PATTERN="$PASS_KEY" 

        if [ "${PASS_KEY}" = "user" ]; then
            PATTERN="user|username"
        elif [ "${PASS_KEY}" = "url" ]; then
            PATTERN="url|website|login"
        fi
           
        PASS_VALUE="$(echo "$PASS_DETAILS" \
                           | grep -iE "^($PATTERN):" \
                           | sed -r 's/^[^:]+:[[:space:]]*//' \
                           | head -1)"
    fi
fi

if [ -z "$PASS_VALUE" ]; then
    echo "Value for property '${PASS_KEY}' in '${PASS_NAME}' not found" >&2
else
    echo -n "${PASS_VALUE}"
fi

exit 0 

#+end_src
**** Usage
#+begin_src bash :noeval
pass-detail pass/path <property>
#+end_src

Note that =property= is either:
- =secret= for getting the secret 
- a user-defined, case-insensitive key for example =pass-detail pass/path username=
  will get the username for the following pass file:
  #+begin_src text
password
Username: username
Url: https://example.com 
  #+end_src
- =user= which will look for either property =user:= or =username:=
- =url= which will look for either property =url:=, =website:= or =login:=
**** TODO figure out how to add 
** Emacs integration
#+BEGIN_SRC elisp :tangle config-auth.el :dir ${HOME}/.local/emacs/site-lisp
(provide 'config-auth)

(config! auth-source-pass
  (auth-source-pass-enable))
#+end_src
* GPG
:PROPERTIES:
:header-args+: :dir ${HOME}/.gnupg
:END:

One hour is a bit short for me to need to reenter my master password. My machines are fairly inaccessible, so 8 hours sounds good.
#+begin_src conf :tangle gpg-agent.conf :var ttl=(* 60 60 8)
default-cache-ttl ${ttl}
max-cache-ttl ${ttl}
#+end_src
