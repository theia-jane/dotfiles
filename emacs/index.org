#+TITLE: Dotfiles

* Intro
  This is my Emacs configuration. Since it is embeded in an org-file 
  it needs to be loaded specially. It can be loaded with =org-babel-load-file=:
  
  #+BEGIN_EXAMPLE emacs-lisp
    (org-bable-load-file "<path>/index.org")
  #+END_EXAMPLE
* Package Setup
** Use package
  Use the wonderful =use-package= which makes managing packages
  wonderfully simple
  #+BEGIN_SRC emacs-lisp
	(require 'package)
  #+END_SRC
  
  Add package repositories using https.
  #+BEGIN_SRC emacs-lisp
	(setq package-enable-at-startup nil)
	(setq package-archives '(("org" . "https://orgmode.org/elpa/")
				("gnu" . "https://elpa.gnu.org/packages/")
				("melpa" . "https://melpa.org/packages/")
				("marmalade" . "https://marmalade-repo.org/packages/")))
  #+END_SRC
  
#+BEGIN_SRC emacs-lisp
	(package-initialize)
#+END_SRC
  
  Make sure =use-package= is installed
  #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
  #+END_SRC
** Try
   #+BEGIN_SRC emacs-lisp
     (use-package try 
       :ensure t)
   #+END_SRC
* Environment
** From Shell
   #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config
      (setq exec-path-from-shell-check-startup-files nil)
      (defun source-file-and-get-envs (filename)
	(let* ((cmd (concat ". " filename "; env"))
	       (env-str (shell-command-to-string cmd))
	       (env-lines (split-string env-str "\n"))
	       (envs (mapcar (lambda (s) (replace-regexp-in-string "=.*$" "" s)) env-lines)))
	  (delete "" envs)))
      (exec-path-from-shell-copy-envs (source-file-and-get-envs "~/.profile")))
   #+END_SRC
** Emacs
   #+BEGIN_SRC emacs-lisp
     (setq
      my-config (expand-file-name "~/.config/personal/")
      my-dotfiles (expand-file-name "~/.config/personal/dotfiles/")
      org-root (expand-file-name "~/org/")
      my-org (expand-file-name  "~/org/"))
   #+END_SRC
** System Detection
   #+BEGIN_SRC emacs-lisp
     (defun is-system (system-name) (eq system-type system-name))
     (defun is-mac () (is-system 'darwin))
     (defun is-linux () (is-system 'gnu/linux))
     (defun system-cond ()
       (cond ((is-mac) mac)
	     ((is-linux) linux)))
   #+END_SRC
* Utilities
** Fuzzy finding
   Fuzzy finding for emacs
   #+BEGIN_SRC emacs-lisp
	 (use-package flx :ensure t)
   #+END_SRC
** Core libraries 
   Add functions for dealing with files, strings and associative data. 
   #+BEGIN_SRC emacs-lisp
     (use-package f :ensure t)
     (use-package s :ensure t)
     (use-package a :ensure t)
     (use-package @ :ensure t)
   #+END_SRC
* Workspaces
  #+BEGIN_SRC emacs-lisp
    ;; (use-package perspective
    ;;     :ensure t
    ;;     :config
    ;;     (persp-mode t))
  #+END_SRC
* Recent Files
  #+BEGIN_SRC emacs-lisp
    (recentf-mode)
  #+END_SRC
* which-key
  #+BEGIN_SRC emacs-lisp
   (use-package which-key :ensure t
   :config
   (which-key-mode 1))
   #+END_SRC
** TODO Which key search 
* Basic File Modes
** Markdown
   #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode :ensure t)
   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode :ensure t)
   #+END_SRC
   
   #+RESULTS:
   
** PHP
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode :ensure t
       :config
       (add-to-list 'auto-mode-alist (cons ".*\\.html" 'web-mode ))
       (add-to-list 'auto-mode-alist (cons ".*\\.php$" 'web-mode )))
   #+END_SRC
** python
   #+BEGIN_SRC emacs-lisp
     (use-package python-mode :ensure t)
   #+END_SRC
** matlab / octave
   #+BEGIN_SRC emacs-lisp
   ;(use-package matlab-mode :ensure t)
;   (use-package ob-
   #+END_SRC
* Parenthesis 
** See matching parenthesis 
   I like being able to see the matching bracket/parenthesis to the
   one under my cursor
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode t)
   #+END_SRC
   
   #+RESULTS:
   : t
   
** Paredit
   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :ensure t
       :diminish paredit-mode
       :config
       (dolist
           (mode-hook '(emacs-lisp-mode-hook
                        eval-expression-minibuffer-setup-hook
                        ielm-mode-hook
                        lisp-mode-hook
                        lisp-interaction-mode-hook
                        scheme-mode-hook))
         (add-hook mode-hook #'enable-paredit-mode)))

     (use-package evil-paredit 
       :ensure t
       :after evil
       :config
       (add-hook 'emacs-lisp-mode-hook 'evil-paredit-mode))
   #+END_SRC
* Ivy / Counsel
  #+BEGIN_SRC emacs-lisp
    ;; Finding / Narrowing / Completing 
    (use-package ivy :ensure t
      :diminish 'ivy-mode
      :config
      (ivy-mode 1)
      ;; clears the intial ^ when using ivy
      (setq ivy-initial-inputs-alist nil
            ivy-re-builders-alist
             '((ivy-switch-buffer . ivy--regex-plus)
               (t . ivy--regex-fuzzy)))
      :bind*
      (("C-x b" . ivy-switch-buffer)
       ("C-x C-b" . ivy-switch-buffer))
      :bind (:map ivy-minibuffer-map
                  ("C-n" . ivy-next-history-element)
                  ("C-p" . ivy-previous-history-element)
                  ("C-k" . ivy-previous-line)
                  ("C-j" . ivy-next-line)
                  ))

    (use-package counsel :ensure t
      :bind
      (("M-x" . counsel-M-x)
       ("C-x f" . counsel-find-file)))

    (use-package swiper :ensure t)
  #+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit 
      :after evil
      :ensure t)
  #+END_SRC

  #+RESULTS:

** Evil 
   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit
       :after magit
       :ensure t)
   #+END_SRC
** TODO Magithub
   Needs some work to hook this up to enterprise github, see [[https://www.reddit.com/r/emacs/comments/6b6xu0/magithub_is_now_hubindependent_important/][link]]
   #+BEGIN_SRC emacs-lisp
     (use-package magithub
       :ensure t
       :after magit
       :init
       ;; fixme this is a temporary hack; see https://github.com/vermiculus/magithub/issues/299
       (define-error 'ghub-404 "Not Found" 'ghub-http-error)
       :config
       (magithub-feature-autoinject t))
   #+END_SRC

   #+RESULTS:
   : t

* Restclient
  #+BEGIN_SRC emacs-lisp
      (use-package restclient 
	:ensure t)
  #+END_SRC
** org-mode integration
   #+BEGIN_SRC emacs-lisp
     (use-package ob-restclient :ensure t)
   #+END_SRC
  
* Slack
  #+BEGIN_SRC emacs-lisp
  ;; (slack-register-team
  ;;  :name ""
  ;;  :default t
  ;;  :client-id ""
  ;;  :client-secret ""
  ;;  :token ""
  ;;  )
  #+END_SRC
  
* JSON
  #+BEGIN_SRC emacs-lisp
;; Example of loading & parsing some JSON
;; https://emacs.stackexchange.com/questions/27407/accessing-json-data-in-elisp
;; (require 'json)
;; (json-read-file "~/.mappings.json")
  #+END_SRC
* Org
** General Vars
   #+BEGIN_SRC emacs-lisp
     (setq
      org-log-into-drawer "logbook"
      org-agenda-files (f-entries my-org (lambda (filename) (s-ends-with-p ".org" filename)) t)
      org-directory "~/org"
      org-modules (append org-modules '(org-drill))
      org-src-fontify-natively t
      org-todo-keywords '((sequence "TODO" "STARTED" "|" "DONE" "CANCELED"))
      org-capture-templates
      '(("p" "Plain" entry (file "") "* %?")
	("t" "Todo" entry (file "") "* TODO %?"))
      org-refile-targets '((nil :maxlevel . 7)
			   (org-agenda-files :maxlevel . 1))
      org-refile-allow-creating-parent-nodes t
      org-outline-path-complete-in-steps nil    ; Refile in a single go
      org-refile-use-outline-path 'file         ; Show full paths for refiling
      org-highlight-latex-and-related '(latex)
      org-M-RET-may-split-line '((default . nil)) ; don't split headings...
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      )


     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
	(emacs-lisp . t)
	(org . t)
	(js . t)
	(C . t)
	; (rust . t)
	(calc . t)
	(octave . t)
	(sqlite . t)
	(latex . t)
	;(php . t)
	(dot . t)
	(plantuml . t)
	(restclient . t)
	;(sagemath . t)
	;(sh . t)
	))
   #+END_SRC
#+BEGIN_SRC emacs-lisp
  ;(use-package ob-sagemath :ensure t)
#+END_SRC
   #+RESULTS:

** Initial
   #+BEGIN_SRC emacs-lisp
     ;; mapping an associative list
     (defun map-alist (f alist)
       (mapcar (lambda (key-val)
                 (setq key (car key-val)
                       val (cdr key-val))
                 (funcall f key val))
               alist))

     ;; Map keywords (TODO) to a nicer icon
     (defun org-mode-todo-symbols (todo-alist)
       (setq org-todo-font-lock-replace
             (map-alist (lambda (keyword symbol)
                          `(,(concat "^\\*+ \\(" keyword "\\) ")
                            (1 (progn (compose-region (match-beginning 1) (match-end 1) ,symbol) nil))))
                        todo-alist))

       (font-lock-add-keywords
        'org-mode org-todo-font-lock-replace))


     (use-package org
       :ensure t 
       :config
       (org-mode-todo-symbols
        '(("TODO" . "⚑")
          ("STARTED" .  "⚐")
          ("CANCELED" .  "✘")
          ("DONE" .  "✔"))))
   #+END_SRC

** Worf
   #+BEGIN_SRC emacs-lisp
    ; (use-package worf :ensure t
    ;   :init (add-hook 'org-mode-hook 'worf-mode))
   #+END_SRC
** Nicer title
   #+BEGIN_SRC emacs-lisp
    ;;(use-package org-beautify-theme :ensure t)
   #+END_SRC
** Bullets
   Pretty Bullets
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets :ensure t
     :init 
       (add-hook 'org-mode-hook 'org-bullets-mode)
    )
   #+END_SRC
** UML
   #+BEGIN_SRC emacs-lisp
     (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
   #+END_SRC
** Archive done 
   #+BEGIN_SRC emacs-lisp
     (defun org-archive-done ()
       (interactive)
	(org-map-entries (lambda () 
			    (org-archive-subtree) 
			    (setq org-map-continue-from (outline-previous-heading))
			    (if (org-before-first-heading-p) (setq org-map-continue-from (outline-next-heading))))
	    "/DONE" 'file))
   #+END_SRC
** Checklist 
   #+BEGIN_SRC emacs-lisp
     (defun org-uncheck-all ()
       (interactive)
       (save-excursion
	 (goto-line 1)
	; TODO: Might be a more formal way to do this?
	; https://emacs.stackexchange.com/questions/12135/replace-string-in-buffer-programatically
	 (while (re-search-forward "\\\[X\\\]" nil t)
	   (replace-match "[ ]" nil t))))
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     ;; usuable interface
     (setq org-html-checkbox-type 'html)
   #+END_SRC
** Hline
   #+BEGIN_SRC emacs-lisp
    (defun tw-org-new-hline ()
      (interactive)
      (setq
       total-length 50
       title (format "* ^ For %s" (read-string "Event: "))
       title-length (length title)
       padded-title (if (> title-length total-length)
			title
		      (concat title (make-string (- total-length title-length) ?-))
			))
      (save-excursion
	(move-end-of-line 1)
	(end-of-line)
	(newline t)
	(insert padded-title))
      )
   
   #+END_SRC
* general key
** Improved repeating
   Extend repeat to be usable in insert mode as well
   #+BEGIN_SRC emacs-lisp
    ;;    (define-key evil-insert-state-map (kbd "C-.") "hello")
   #+END_SRC
** File Writing
   #+BEGIN_SRC emacs-lisp
     (setq backup-by-copying-when-linked t)
   #+END_SRC
** Annoying new lines
   #+BEGIN_SRC emacs-lisp
   (setq mode-require-final-newline nil)
   #+END_SRC
   
* evil
  #+BEGIN_SRC emacs-lisp
    (use-package evil 
      :ensure t
      :init (setq evil-want-integration nil)
      :config
      (evil-mode 1)
      (setq 
       evil-overriding-maps nil
       evil-intercept-maps nil))
  #+END_SRC
** Evil Surround
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :ensure t
       :after evil
       :config
        (global-evil-surround-mode 1))
   #+END_SRC
** Evil comentary 
   #+BEGIN_SRC emacs-lisp
     (use-package evil-commentary
       :ensure t
       :after evil
       :diminish 'evil-commentary-mode
       :config
       (evil-commentary-mode))
             
   #+END_SRC
** Evil collection
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))
        
   #+END_SRC
* Local Hook
  Sometimes I want to have a set of machine specific configuration. 
  For example, on a work machine. I don't want work specific settings or
  functions to be here. One, it is for purity (this repo is for what /I/ like).
  Two, work things are of a confidential nature and aren't open for the public 
  to see. 

  #+BEGIN_SRC emacs-lisp
    (if  (file-exists-p  "~/.emacs.local.org")
	(org-babel-load-file "~/.emacs.local.org"))
  #+END_SRC
* httpd
  #+BEGIN_SRC emacs-lisp
  (use-package httpd :ensure t)
  #+END_SRC
* User Interface
  Best to have user interface things at the end of the config.. just so 
  everything is setup first... (Having issues with diminish right now) 
** Visual
*** Clean up 
**** Hide GUI 
     I don't really like the menu bars or scroll bars. They are ugly
     and distract from the content.
     #+BEGIN_SRC emacs-lisp
	 (menu-bar-mode 0)
	 (tool-bar-mode 0)
	 (scroll-bar-mode 0)
     #+END_SRC
**** Start screen
     #+BEGIN_SRC emacs-lisp
	 (setq inhibit-startup-screen t)
     #+END_SRC
**** Noises
     Shut up the bell
     #+BEGIN_SRC emacs-lisp 
	 (defun my-bell-function ())
	 (setq ring-bell-function 'my-bell-function)
	 (setq visible-bell nil)
     #+END_SRC
*** Cursor  
    Stop the cursor from blinking
    #+BEGIN_SRC emacs-lisp
      (blink-cursor-mode -1)
    #+END_SRC
*** Font 
    Set font niceness
    #+BEGIN_SRC emacs-lisp
    (set-default-font "Source Code Pro-14")
    #+END_SRC
**** Lambda
     #+BEGIN_SRC emacs-lisp
       (defvar keyword-lambda
	 '(("(\\(lambda\\)\\>"
	    (0 (prog1 () (compose-region
			  (match-beginning 1)
			  (match-end 1) ?λ))))))
       (font-lock-add-keywords 'emacs-lisp-mode keyword-lambda) 
     #+END_SRC
*** Color
    #+BEGIN_SRC emacs-lisp
      ;(use-package darktooth-theme :ensure t :config (load-theme 'darktooth t))
      ;(use-package leuven-theme :ensure t :config (load-theme 'leuven))
      (use-package gruvbox-theme :ensure t :config (load-theme 'gruvbox t))
    #+END_SRC
**** Terminal + GUI 
     Example of telling when in terminal (need to still figure out emacs client)
     https://emacs.stackexchange.com/questions/13050/different-theme-for-nw-terminal
     https://emacs.stackexchange.com/questions/2096/different-themes-for-terminal-and-graphical-frames-when-using-emacs-daemon
*** Modeline
**** Spaceline
     #+BEGIN_SRC emacs-lisp
       (use-package spaceline 
	 :ensure t
	 :init
	 (setq powerline-default-separator 'wave)
	 :config
	 (require 'spaceline-config)
	 (spaceline-spacemacs-theme)
	 (spaceline-toggle-minor-modes-off))         
     #+END_SRC

     #+RESULTS:

**** Hide minor modes 
     I don't like seeing all the minor modes. It doesn't add
     much for me. There might be some that I like to have, but
     the ones I always have on.. not so much.
     #+BEGIN_SRC emacs-lisp
       (use-package diminish
         :ensure t
         :config
         (dolist (package '(undo-tree-mode
                            which-key-mode
                            evil-commentary-mode
                            ivy-mode
                            auto-revert-mode
                            company-mode
                            yas-minor-mode
                            isearch-mode)) 
           (diminish package)))
     #+END_SRC
** Keybindings
   #+BEGIN_SRC emacs-lisp
          (use-package general :ensure t
            :config
            (setq leader-modemap-list
                  '(dired-mode-map))
     ; [[https://emacs.stackexchange.com/questions/38319/unable-to-bind-spc-as-a-prefix-in-general-evil-mode]]
            (general-def
              :states '(normal motion operator visual)
              :keymaps leader-modemap-list 
              "SPC" nil)
            (general-def
              :states '(insert normal motion operator visual emacs)
              :keymaps leader-modemap-list 
              "C-SPC" nil)
            (general-define-key
             :states '(normal visual insert emacs)
             :prefix "SPC"
             :non-normal-prefix "C-SPC"

             "SPC"   'counsel-M-x
             "f d e" '(lambda () (interactive) (find-file (concat my-dotfiles "emacs/index.org")))
             "f d f" '(lambda () (interactive) (counsel-find-file my-dotfiles))
             "f o f" '(lambda () (interactive) (counsel-find-file org-root))
             "f f" 'counsel-find-file
             "f s" 'save-buffer

             "p v s" 'magit-status
             "p v p" 'magit-pull
             "p f" 'counsel-git

             "b b" 'ivy-switch-buffer
             "b d" 'kill-this-buffer
             "b n" 'next-buffer
             "b p" 'previous-buffer
             "b d" 'kill-this-buffer

             "s s" 'swiper
             "s p" 'counsel-ag

             "h f" 'describe-function
             "h k" 'which-key-show-top-level
             "h K" 'describe-key
             "h v" 'describe-variable
             ))
   #+END_SRC

** Mini-buffer annoyance
   #+BEGIN_SRC emacs-lisp
     (defun stop-using-minibuffer ()
       "kill the minibuffer"
       (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
         (abort-recursive-edit)))

     (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
   #+END_SRC

   #+RESULTS:
   | stop-using-minibuffer |
** Backups less annoying 
   #+BEGIN_SRC emacs-lisp
     ;; make backup to a designated dir, mirroring the full path

     (defun my-backup-file-name (fpath)
       "Return a new file path of a given file path.
     If the new path's directories does not exist, create them."
       (let* ((backupRootDir "~/.emacs.d/emacs-backup/")
              (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
              (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
              )
         (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
         backupFilePath
         )
       )

     (setq make-backup-file-name-function 'my-backup-file-name) 
   #+END_SRC

   #+RESULTS:
   : my-backup-file-name
** Simpler confirmation
   I don't like dealing with the 'yes' or 'no' dialogs. Too much typing.
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
   Ah, 'y' or 'n'. I save myself 1.5 keys on average!
* yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :config
      (setq yas-snippet-dirs
       `(,(concat my-dotfiles "yasnippets")))
      (yas-global-mode 1))

  #+END_SRC

** bundled snippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet-snippets
       :ensure t
       :after yasnippet)
             
   #+END_SRC
** auto yasnippet 
   On the fly snippets.
   #+BEGIN_SRC emacs-lisp
     (use-package auto-yasnippet 
        :ensure t
        :config 
        (general-define-key
         :states '(normal visual insert emacs)
         :prefix "SPC"
         :non-normal-prefix "C-SPC"

         ;; Create snippet
         "c s" 'aya-create

         ;; Insert snippet
         "i s" 'aya-expand

         ;; Maybe a key binding for persisting snippets?
         ;; aya-persist-snippet
         ))
   #+END_SRC

* Company
  completion framwork
  #+BEGIN_SRC emacs-lisp
    (use-package company :ensure t
      :config
      (add-hook 'after-init-hook 'global-company-mode)) 

  #+END_SRC

* Dired
Start dired with details hidden
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC
* Sagemath
  #+BEGIN_SRC emacs-lisp
    (use-package sage-shell-mode :ensure t)
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
    (use-package ob-sagemath :ensure t) 
  #+END_SRC

* Algorithms
  #+BEGIN_SRC emacs-lisp
  (defun tw-algorithms () (interactive)
    (counsel-find-file "~/Nextcloud/Documents/algorithms"))
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile 
      :ensure t
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy))
  #+END_SRC
  
* Blog
#+BEGIN_SRC emacs-lisp
  (use-package easy-hugo
    :ensure t)
#+END_SRC

* org-wiki ( and helm :/ )
  #+BEGIN_SRC emacs-lisp
    (defun init-org-wiki ()
      (unless (package-installed-p 'org-wiki)
	(let* ((package-base (expand-file-name "~/.emacs.d/packages"))
	      (org-wiki-path (concat package-base "/org-wiki")))
	  (make-directory package-base t)
	  (shell-command
	   (concat
	    "git clone https://github.com/caiorss/org-wiki "
	    org-wiki-path))
	  (package-install-file (concat org-wiki-path "/org-wiki.el"))
	  (make-directory (expand-file-name "~/org/wiki") t)))
      (require 'org-wiki))
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
    (use-package helm :ensure t
      :config
      (init-org-wiki))
  #+END_SRC
* Cold folding
#+BEGIN_SRC emacs-lisp
  (use-package origami :ensure t
  :config
  (global-origami-mode 1))

#+END_SRC

* Checklists
  #+BEGIN_SRC emacs-lisp
    (defun my-morning-checklist () (interactive)
	   (find-file (expand-file-name (concat my-org "/checklist/morning.org")))
	   (org-uncheck-all)) 

    (defun my-evening-checklist () (interactive)
	   (find-file (expand-file-name (concat my-org "/checklist/evening.org")))
	   (org-uncheck-all)) 
  #+END_SRC