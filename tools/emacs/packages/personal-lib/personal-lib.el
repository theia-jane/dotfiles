;;; personal-lib.el -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;  Description
;;
;;; Code:
(require 'commands-lib)
(require 'use-package)
(require 'variable-utils)

(defmacro after! (package-or-list &rest body)
  "Do BODY after PACKAGE-OR-LIST have loaded.

Just leverages `use-package'."
  `(use-package emacs
     :defer t
     :after ,(enlist package-or-list) 
     :config (progn ,@body)))

(defalias
  'config!
  'after!
  "Just configure a package(s).. Nothing else!

Alias of `after!' that is a little more descriptive at times.")

(defmacro before! (package &rest body)
  "Do BODY before PACKAGE has been loaded.

Just leverages `use-package'."
  `(use-package ,package
     :defer t
     :init (progn ,@body)))

(defalias
  'init!
  'before!
  "Initialize a package (settings to be set before it's loaded)")


(defmacro with-contents (contents &rest body)
  `(with-temp-buffer
     (insert ,contents)
     ,@body))

(defun trim-trailing-newline (string)
  (with-contents string
                 (goto-char (point-max))
                 (when (= (char-before) ?\n)
                   (delete-char -1))
                 (buffer-string)))

(defmacro debug-sexps (&rest sexps)
  "Prints SEXPS evaled and their results."
  `(dolist (sexp ',sexps)
    (message "%s => %s"
             (s-trim (pp-to-string sexp))
             (eval sexp))))

(defmacro cmd (&rest body)
  `#'(lambda () (interactive)
         ,@body))

(defmacro produced-content-to-string (&rest sexps)
    `(trim-trailing-newline
        (with-temp-buffer
            ,@sexps
            (buffer-string))))

(defmacro make-to-string-fn (fn)
  `(defun ,(intern (concat (symbol-name fn) "-to-string")) (&rest args)
     ,(format "See `%s' for usage instructions.

Function generated by `make-fn-to-string'"
              (symbol-name fn))
     (produced-content-to-string
        (apply #',fn args))))

(make-to-string-fn clipboard-yank)

(provide 'personal-lib)
;;; personal-lib.el ends here
