#+TITLE: Shell
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}
#+STARTUP: overview

* Profile
:PROPERTIES:
:header-args+: :tangle .profile
:END:
#+BEGIN_SRC bash
export OS="$(uname | tr "[A-Z]" "[a-z]")"
export notes="${HOME}/notes"
export docs="${HOME}/Documents"
export org="${HOME}/org"
export p="${HOME}/Projects"

export dot="$p/dotfiles"
export cfg="${HOME}/.config"
export lcl="${HOME}/.local"
export cfg_sh="${cfg}/sh"
export cfg_emacs="${dot}/tools/emacs"
export DOOMDIR="${cfg_emacs}/doom"
export PERSONAL_EMACS_PACKAGES="$(find "$cfg_emacs/packages" -maxdepth 1 -type d  -exec realpath {} \; | tr '\n' ':')"
export EMACSLOADPATH="${lcl}/emacs/site-lisp:${PERSONAL_EMACS_PACKAGES}"

export CLICOLOR=1
export GTAGSLABEL="pygments"

PATHS=(
    "${HOME}/bin"
    "${HOME}/.local/bin"
    "${dot}/bin"
    "/usr/local/bin"
    "/usr/bin"
    "/bin"
    "/usr/sbin"
    "/sbin"
    "${HOME}/miniconda3/bin"
    "${cfg}/emacs/bin"
    "${HOME}/.cargo/bin"
    "/usr/bin/vendor_perl"
)
export PATH="$(IFS=':'; echo "${PATHS[*]}")"

if [ ! -z "$(which emacsdclient)" ]; then
  EDITOR="emacsdclient -c"
fi

if [ ! -z "$(which nvim)" ]; then
  EDITOR="${EDITOR:-nvim}"
  export MANPAGER="nvim -c 'set ft=man' -"
fi

export EDITOR="${EDITOR:-vim}"

ENV_DIR="$cfg/env"
if [ -d "${ENV_DIR}" ]; then
  for env_file in $(ls "${ENV_DIR}"); do
		source "${ENV_DIR}/${env_file}"
	done
fi

SHELL_NAME="$(echo $0 | grep -oh '[a-z]*sh')"
source "${HOME}/.${SHELL_NAME}rc"
#+END_SRC
** Tools
*** go
#+BEGIN_SRC bash
export GOBIN="${HOME}/go/bin"
export PATH="${PATH}:${GOBIN}"
#+END_SRC
*** perl
#+BEGIN_SRC bash
if [ -d "${HOME}/perl5" ]; then
  export PATH="${HOME}/perl5/bin${PATH:+:${PATH}}"
  export PERL5LIB="${HOME}/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
  export PERL_LOCAL_LIB_ROOT="${HOME}/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
  export PERL_MB_OPT="--install_base \"${HOME}/perl5\""
  export PERL_MM_OPT="INSTALL_BASE=${HOME}/perl5"
fi
#+END_SRC
*** rust
#+BEGIN_SRC bash
if [ ! -z "$(which rustc)" ]; then
  # rustup component add rust-src
  export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
fi
#+END_SRC
*** ruby
#+BEGIN_SRC bash
if [ -d "${HOME}/.rbenv" ]; then
  export PATH="${HOME}/.rbenv/bin:${PATH}"
  eval "$(rbenv init -)"
fi

[ -d "${HOME}/.rbenv/plugins/ruby-build" ] && export PATH="${HOME}/.rbenv/plugins/ruby-builder/bin:${PATH}"

if [ -d "${HOME}/.gem/ruby" ]; then
    export PATH="${PATH}$(printf ':%s' ${HOME}/.gem/ruby/*/bin)"
fi
#+END_SRC
*** fzf
#+BEGIN_SRC bash
[ ! -d "${HOME}/.fzf" ] \
  && git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf

[ ! -e "${HOME}/.fzf.${SHELL_NAME}" ] \
  && ~/.fzf/install

source ${HOME}/.fzf.${SHELL_NAME}

if [ ! -z "$(which ag)" ]; then
  export FZF_DEFAULT_COMMAND='(ag --hidden --ignore node_modules --ignore .git --ignore .idea --ignore .DS_Store -f -g "") 2> /dev/null'
fi

export FZF_DEFAULT_OPTS='--bind="ctrl-alt-a:select-all+accept,alt-a:select-all,alt-u:deselect-all,alt-u:deselect-all+accept,alt-enter:print-query"'
#+END_SRC
*** node
#+BEGIN_SRC bash
export NVM_DIR="${HOME}/.nvm"
[ -s "${NVM_DIR}/nvm.sh" ] && source "${NVM_DIR}/nvm.sh"
#+END_SRC
*** ocaml
#+BEGIN_SRC bash
test -r /home/tware/.opam/opam-init/init.sh && . /home/tware/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true
#+END_SRC
*** vterm
#+BEGIN_SRC bash
function vterm_printf(){
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}
#+END_SRC
*** latex
#+BEGIN_SRC bash
export TEXMFHOME="${cfg}/texmf"
#+END_SRC
* Shells
** bash
#+BEGIN_SRC bash :tangle .bashrc
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
shopt -s histappend                      # append to history, don't overwrite it

# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
#+END_SRC

** zsh
:PROPERTIES:
:header-args+: .zshrc
:END:
*** Options
#+BEGIN_SRC bash
autoload -U compinit
compinit

HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
setopt APPEND_HISTORY # Don't erase history
setopt EXTENDED_HISTORY # Add additional data to history like timestamp
setopt INC_APPEND_HISTORY # Add immediately
setopt HIST_SAVE_NO_DUPS # Don't save any duplicates
setopt NO_HIST_BEEP # Don't beep
setopt SHARE_HISTORY # Share history between session/terminals
#+END_SRC
*** Keybinds
#+BEGIN_SRC bash
bindkey "\C-f" history-incremental-search-forward
bindkey "\C-r" history-incremental-search-backward

bindkey "\C-n" down-line-or-history
bindkey "\C-p" up-line-or-history

autoload -U edit-command-line
zle -N edit-command-line
bindkey "\C-x\C-e" edit-command-line
#+END_SRC
*** Plugins
#+BEGIN_SRC bash
[ ! -f ~/.antigen.zsh ] && curl -L git.io/antigen > ~/.antigen.zsh
source ~/.antigen.zsh
antigen bundle cusxio/delta-prompt > /dev/null
antigen bundle zsh-users/zsh-syntax-highlighting > /dev/null
antigen apply
#+END_SRC
