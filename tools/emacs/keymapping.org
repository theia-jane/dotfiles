#+TITLE: Keymapping

* Keymap config
:PROPERTIES:
:header-args:elisp: :tangle config-keys.el :dir ${HOME}/.local/emacs/site-lisp
:END:

#+BEGIN_SRC elisp
(provide 'config-keys)
(require 's)
#+END_SRC

** Helper methods
*** Which key
#+begin_src elisp
(defun +which-key-match-repl-p (key repl)
  "Test if KEY is contained in the key-regexp in REPL, which should
be from `which-key-replacement-alist'.

Referenced `which-key--match-replacement' for the logic"
  (when (and (not (symbolp (car repl)))
             (stringp (caar repl)))
    (let ((key-regexp (caar repl)))
      (s-contains-p key key-regexp))))

(defun +which-key-make-copy-repl (from-key to-key repl)
  (let ((key-regexp (caar repl)))
    (cons
        (cons (s-replace from-key to-key key-regexp) nil)
        (cdr-safe repl))))

(defun +which-key-duplicate-metadata (from to)
  (dolist (repl which-key-replacement-alist)
    (when (+which-key-match-repl-p from repl)
      (let ((copy-repl (+which-key-make-copy-repl from to repl)))
        (assoc-delete-all (car copy-repl) which-key-replacement-alist)
        (push copy-repl which-key-replacement-alist)))))
#+end_src

*** Prefix keys
#+begin_src elisp
(defun prefix-key-symbol (prefix)
  (intern (format "prefix-%s-key" (symbol-name prefix))))

(defun prefix-key-map-symbol (prefix)
  (intern (format "prefix-%s-map" (symbol-name prefix))))

(defun setup-new-prefix-key (prefix key)
  (let ((key-sym (prefix-key-symbol prefix))
        (map-sym (prefix-key-map-symbol prefix)))
    (eval
     `(progn
        (defvar ,key-sym ,key)
        (defvar ,map-sym (make-sparse-keymap))
        (define-prefix-command ',prefix ',map-sym)
        (keymap-set override-global-map ,key-sym ,map-sym)))))


(defun map-prefix-keys (prefix &rest key-bindings)
  (let ((key-sym (prefix-key-symbol prefix))
        (map-sym (prefix-key-map-symbol prefix)))
    (while (length> key-bindings 1)
      (let ((key (pop key-bindings))
            (binding (pop key-bindings)))
        (keymap-set (symbol-value map-sym) key binding)))))

(defun duplicate-prefix-key (&rest duplicate-mapping)
  (while (length> duplicate-mapping 1)
    (let* ((from (pop duplicate-mapping))
          (to (pop duplicate-mapping))
          (mapped-to (key-binding (kbd from) t)))
        (define-key override-global-map (kbd to) mapped-to)
        (set (intern (format "%s-map" to)) mapped-to)
      (+which-key-duplicate-metadata from to))))
#+end_src

** HyperCtrl Map
Sometimes I want to bulk remap control prefixed keys to be usable by the same hyper prefix keys,
this package enables that, so =C-c C-v C-t= can be used by =H-c H-v H-t=
#+begin_src elisp
(defun hyper-ctrl--make-map ()
  (let ((keymap (make-sparse-keymap)))
    (set-keymap-parent keymap hyper--original)
    (cl-loop for i from 33 to 126
             do
            (let ((c (char-to-string i)))
              (define-key keymap (kbd (concat "H-" c)) (kbd (concat "C-" c)))
              (define-key keymap (kbd (concat "H-M-" c)) (kbd (concat "C-M-" c)))
              (define-key keymap (kbd (concat "H-S-" c)) (kbd (concat "C-S-" c)))
              (define-key keymap (kbd (concat "H-M-S-" c)) (kbd (concat "C-M-S-" c)))))
    keymap))

(defvar hyper--original key-translation-map)
(defvar hyper--debug nil)
(defvar hyper-ctrl-translation-map (hyper-ctrl--make-map))
(defvar hyper--initial-command nil)

(defun hyper-ctrl/off  ()
  (interactive)
  (setq key-translation-map (keymap-parent hyper-ctrl-translation-map))
  (when (or (called-interactively-p) hyper--debug)
      (message "[HyperCtrl] map is off.")))

(defun hyper-ctrl/on ()
  (interactive)
  (setq key-translation-map hyper-ctrl-translation-map)
  (when (or (called-interactively-p) hyper--debug)
    (message "[HyperCtrl] map is on.")))

(defun hyper-ctrl--off-h ()
  (unless (memq this-command `(,hyper--initial-command
                               which-key-C-h-dispatch))
    (when hyper--debug
        (message "[HyperCtrl] this-command: %s" this-command))
    (setq hyper--initial-command nil)
    (hyper-ctrl/off)
    (remove-hook 'post-command-hook #'hyper-ctrl--off-h)))

(defun hyper-ctrl-on-until-next-command ()
  (setq hyper--initial-command this-command)
  (hyper-ctrl/on)
  (add-hook 'post-command-hook #'hyper-ctrl--off-h))

(defun hyper-ctrl-on-prefix (trigger-prefix target-prefix)
  (define-key (current-global-map)
              (kbd trigger-prefix)
              `(lambda ()
                 (interactive)
                 (setq this-command nil)
                 (when (eq evil-state 'insert)
                   (let ((evil-no-display t))
                     (evil-execute-in-normal-state)))
                 (hyper-ctrl-on-until-next-command)
                 (setq unread-command-events (listify-key-sequence (kbd ,target-prefix))))))

(defun hyper-ctrl-on-prefix-key (key)
  (hyper-ctrl-on-prefix
   (concat "H-" key)
   (concat "C-" key)))
#+end_src

*** General purpose
Probably should move this up and out
#+begin_src elisp
;; Make hyper keys that always act like another key
(define-key key-translation-map (kbd "H-;") (kbd "C-u"))
(define-key key-translation-map (kbd "H-q") (kbd "C-g"))

(defun hyper-to-control-g (maps)
  (dolist (map (enlist maps))
    (define-key
      (if (symbolp map) (symbol-value map) map)
      (kbd "H-g")
      (kbd "C-g"))))

;; Bind H-g to C-g in special cases
(hyper-to-control-g '(minibuffer-local-map))

;; Make hyper work as control for C-c, C-x and C-h (and all subsequent keys)
(dolist (key '("c" "x" "h" "w"))
    (hyper-ctrl-on-prefix-key key))
#+end_src
*** Transient
Setup hyper-control mapping while using transient prefixes
#+begin_src elisp
(defun hyper-ctrl-transient-on ()
  (hyper-ctrl/on)
  (add-hook 'transient-exit-hook #'hyper-ctrl-transient-off))

(defun hyper-ctrl-transient-off ()
      (unless transient--prefix
        (hyper-ctrl/off)
        (remove-hook 'transient-exit-hook #'hyper-ctrl-transient-off)))

(advice-add #'transient--setup-transient :before #'hyper-ctrl-transient-on)
(advice-remove #'transient--setup-transient #'hyper-ctrl-transient-on)
#+end_src
