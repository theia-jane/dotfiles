#+TITLE: Org
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}/.local/emacs/site-lisp

* General
#+BEGIN_SRC elisp :tangle config-org.el
(provide 'config-org)
(require 'f)

(config! org
  (setq org-directory "~/notes/"
        org-link-elisp-confirm-function nil
        org-agenda-files `(,(f-join org-directory "projects"))
        org-todo-keywords '((sequence "TODO" "STARTED" "|" "DONE" "CANCELED"))
        org-refile-targets '((nil :maxlevel . 7)
                             (org-directory-files :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1))
        org-refile-allow-creating-parent-nodes t
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil
        org-M-RET-may-split-line '((default . nil))
        org-plantuml-jar-path (expand-file-name "~/java/plantuml/plantuml.jar")
        org-list-allow-alphabetical t)

  (defun org-directory-files ()
    "List the org files in the current directory"
    (directory-files default-directory nil "\\.org$"))

  (require! org-edit
            org-navigate
            org-server-manager
            ob-extended-tangle
            ob-var-table
            ob-text-var-expansion
            ob-script-exec
            ob-async
            ob-restclient)

  <<org/source-blocks>>
  <<org/extensions>>
  <<org/dwim>>
  <<org/keybindings>>
  <<org/crypt>>
  <<org/evil>>)
#+END_SRC

** Org source blocks
#+NAME: org/source-blocks
#+BEGIN_SRC elisp :tangle no
(setq org-src-window-setup 'current-window
      org-src-tab-acts-natively t
      org-src-preserve-indentation t
      org-src-ask-before-returning-to-edit-buffer nil)

(add-to-list 'org-modules
             'org-tempo)

(keymap! :map org-src-mode-map
         "C-c C-c" #'org-edit-src-exit)
#+END_SRC
** Extensions
#+NAME: org/extensions
#+begin_src elisp
(defun org/goto-next-src-block ()
  (interactive)
  (org-next-block 1 nil "^[ \t]*#\\+begin_src")
  (+ui/smart-scroll-to-top))

(defun org/eval-src-block-then-next ()
  (interactive)
  (condition-case _err
      (org-babel-execute-src-block)
    (t
     (org/goto-next-src-block)
     (org-babel-execute-src-block)))
  (org/goto-next-src-block))
#+end_src
*** DWIM
#+NAME: org/dwim
#+begin_src elisp
(require 'dwim)

(defun org-element-context-skipping (skip-list)
  (let ((context (org-element-context)))
    (while (and context (memq (org-element-type context) skip-list))
      (setq context (org-element-property :parent context)))
    context))

(def-dwim org-enter
  :interactive ("P")
  :applies-when (eq major-mode 'org-mode)
  :let ((context (org-element-context-skipping
                  '(verbatim code bold italic underline strike-through subscript superscript)))
        (type (org-element-type context)))
  :default #'dwim-undefined

  :case (eq type 'link) (org-open-at-point arg)
  :case (or (org-at-item-checkbox-p)
            (org-element-property :checkbox (org-element-lineage context '(item) t)))
  (org-toggle-checkbox arg)
  :case (memq type '(latex-fragment latex-environment))
        (org-latex-preview arg))
#+end_src
** Keybindings
#+NAME: org/keybindings
#+begin_src elisp
(keymap! (:map org-mode-map
               "<S-return>" #'org-ctrl-c-ctrl-c
               :ni "<C-S-return>" #'org/eval-src-block-then-next
               :n "M-i" #'org-edit-special
               :ni "M-o" #'org-cleave
               "RET" nil
               :n [return] #'org-enter-dwim
               :n "RET" #'org-enter-dwim)

         (:after evil-org :map evil-org-mode-map
                 :ni "<C-S-return>" #'org/eval-src-block-then-next
                 ;; evil-org text objects
                 :vo "ae" #'evil-org-an-object
                 :vo "ie" #'evil-org-inner-object
                 :vo "aE" #'evil-org-an-element
                 :vo "iE" #'evil-org-inner-element
                 :vo "ir" #'evil-org-inner-greater-element
                 :vo "ar" #'evil-org-a-greater-element
                 :vo "aR" #'evil-org-a-subtree
                 :vo "iR" #'evil-org-inner-subtree)
         (:map org-server-manager-mode-map
               :desc "Open dired to remote" "C-c s" #'org-server-manager-ssh-connect))
#+end_src
** Crypt
#+NAME: org/crypt
#+begin_src elisp
(config! org-crypt
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt"))
        org-crypt-key nil))
#+end_src
** Evil
#+NAME: org/evil
#+begin_src elisp
(after! evil (require 'evil-org))
(config! evil-org
         (setq evil-org-use-additional-insert t)
         (add-hook 'org-mode-hook 'evil-org-mode)
         (evil-org-set-key-theme '(navigation insert textobjects additional calendar)))

#+end_src
* Latex
:PROPERTIES:
:header-args+: :tangle config-org-latex.el
:END:
#+BEGIN_SRC elisp
(provide 'config-org-latex)
(config! org
  (setq org-highlight-latex-and-related nil)
#+END_SRC

** Fixing rendering
Using =\color= in latex messes with vspace something awful / unpredicatably. To fix that I set =\color= and =\pagecolor= in the preamble instead of in the document. I should push this upstream.
#+begin_src elisp
(defun org-create-formula-image
    (string tofile options buffer &optional processing-type)
  "Create an image from LaTeX source using external processes.

The LaTeX STRING is saved to a temporary LaTeX file, then
converted to an image file by process PROCESSING-TYPE defined in
`org-preview-latex-process-alist'.  A nil value defaults to
`org-preview-latex-default-process'.

The generated image file is eventually moved to TOFILE.

The OPTIONS argument controls the size, foreground color and
background color of the generated image.

When BUFFER non-nil, this function is used for LaTeX previewing.
Otherwise, it is used to deal with LaTeX snippets showed in
a HTML file."
  (let* ((processing-type (or processing-type
                              org-preview-latex-default-process))
         (processing-info
          (cdr (assq processing-type org-preview-latex-process-alist)))
         (programs (plist-get processing-info :programs))
         (error-message (or (plist-get processing-info :message) ""))
         (image-input-type (plist-get processing-info :image-input-type))
         (image-output-type (plist-get processing-info :image-output-type))
         (post-clean (or (plist-get processing-info :post-clean)
                         '(".dvi" ".xdv" ".pdf" ".tex" ".aux" ".log"
                           ".svg" ".png" ".jpg" ".jpeg" ".out")))
         (latex-header
          (or (plist-get processing-info :latex-header)
              (org-latex-make-preamble
               (org-export-get-environment (org-export-get-backend 'latex))
               org-format-latex-header
               'snippet)))
         (latex-compiler (plist-get processing-info :latex-compiler))
         (image-converter (plist-get processing-info :image-converter))
         (tmpdir temporary-file-directory)
         (texfilebase (make-temp-name
                       (expand-file-name "orgtex" tmpdir)))
         (texfile (concat texfilebase ".tex"))
         (image-size-adjust (or (plist-get processing-info :image-size-adjust)
                                '(1.0 . 1.0)))
         (scale (* (if buffer (car image-size-adjust) (cdr image-size-adjust))
                   (or (plist-get options (if buffer :scale :html-scale)) 1.0)))
         (dpi (* scale (if buffer (org--get-display-dpi) 140.0)))
         (fg (or (plist-get options (if buffer :foreground :html-foreground))
                 "Black"))
         (bg (or (plist-get options (if buffer :background :html-background))
                 "Transparent"))
         (log-buf (get-buffer-create "*Org Preview LaTeX Output*"))
         (resize-mini-windows nil)) ;Fix Emacs flicker when creating image.
    (dolist (program programs)
      (org-check-external-command program error-message))
    (if (eq fg 'default)
        (setq fg (org-latex-color :foreground))
      (setq fg (org-latex-color-format fg)))
    (setq bg (cond
              ((eq bg 'default) (org-latex-color :background))
              ((string= bg "Transparent") nil)
              (t (org-latex-color-format bg))))
    ;; Remove TeX \par at end of snippet to avoid trailing space.
    (if (string-suffix-p string "\n")
        (aset string (1- (length string)) ?%)
      (setq string (concat string "%")))
    (with-temp-file texfile
      (insert latex-header
              "\n"
              "\\definecolor{fg}{rgb}{" fg "}%\n"
              (if bg
                  (concat "\\definecolor{bg}{rgb}{" bg "}%\n"
                          "\n\\pagecolor{bg}%\n")
                "")
              "\\color{fg}\n"
              "\\begin{document}\n"
              "\\noindent%\n"
              string
              "\n\\end{document}\n"))
    (let* ((err-msg (format "Please adjust `%s' part of \
`org-preview-latex-process-alist'."
                            processing-type))
           (image-input-file
            (org-compile-file
             texfile latex-compiler image-input-type err-msg log-buf))
           (image-output-file
            (org-compile-file
             image-input-file image-converter image-output-type err-msg log-buf
             `((?D . ,(shell-quote-argument (format "%s" dpi)))
               (?S . ,(shell-quote-argument (format "%s" (/ dpi 140.0))))))))
      (copy-file image-output-file tofile 'replace)
      (dolist (e post-clean)
        (when (file-exists-p (concat texfilebase e))
          (delete-file (concat texfilebase e))))
      image-output-file)))

#+END_SRC

#+begin_src elisp
(setq org-format-latex-options
      '(:foreground default
        :background default
        :scale 1.0
        :html-foreground "Black"
        :html-background "Transparent"
        :html-scale 1.0
        :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src
** Latex preview
http://bnbeckwith.com/blog/org-mode-tikz-previews-on-windows.html
Note if you have issues w/ rendering might need to check your imagemagick policies /etc/ImageMagick-{6,7}/policy.xml. It's possible that one of the policies is set to 'none' for something. =(setq org-preview-latex-default-process 'imagemagick)=

#+BEGIN_SRC elisp
(defun org-latex-preview-buffer ()
  (interactive)
  (when (eq major-mode 'org-mode)
        (org--latex-preview-region (point-min) (point-max))))

(defun org-latex-preview-buffer-h ()
  (add-hook 'after-save-hook #'org-latex-preview-buffer))

(add-hook 'org-mode-hook #'org-latex-preview-buffer-h)
#+END_SRC

Add the packages I use
#+BEGIN_SRC elisp
(dolist (package '("tikz"
                   "tikz-config"
                   "shorthand"))
        (add-to-list 'org-latex-packages-alist `("" ,package t)))
#+END_SRC

#+BEGIN_SRC elisp
(config! preview
  (add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
#+END_SRC

Change where the preview cache lives. Make it OS global, so all emacs instances can use it.
#+begin_src elisp
(config! org
  (setq org-preview-latex-image-directory (expand-file-name "~/.cache/emacs/org-latex-preview/")))
#+end_src
*** TODO make preview async
I have /lots/ of latex embedded into my documents sometimes and it's annoying to wait for the previews to render, so ideally they should be done async.
*** TODO add ability to preview src & example blocks
Somethings are easier to accomplish in a straight =#+begin_src latex= block. In particular, some things like adding oomlats via ={\"o}= just don't work.
*** TODO Allow for result type of latex from src blocks
** pdf2svg
#+BEGIN_SRC elisp
(setq org-preview-latex-default-process 'pdf2svg
      org-export-with-latex 'dvipng)
(add-to-list
 'org-preview-latex-process-alist
 '(pdf2svg :programs
           ("latex" "pdf2svg" "rsvg-convert")
           :description "pdf > svg" :message "you need to install the programs: latex and pdf2svg." :image-input-type "pdf" :image-output-type "svg" :image-size-adjust
           (1.5 . 1)
           :latex-compiler
           ("pdflatex -interaction nonstopmode -output-directory %o -shell-escape %f")
           :image-converter
           ("pdf2svg %f %O-pre"
            "rsvg-convert -d %D -p %D %O-pre -f svg -o %O"
            "rm %O-pre")))

(defadvice! +org-svg-preview (fn &rest args)
  :around 'org--latex-preview-region
  (let ((org-preview-latex-default-process 'pdf2svg))
    (apply fn args)))

(defadvice! +org-use-svg-documentclass (fn string tofile options buffer &optional processing-type)
  :around 'org-create-formula-image
  (let* ((processing-type (or processing-type
                              org-preview-latex-default-process))
         (org-format-latex-header (if (memq processing-type '(pdf2svg pdf2svg2png))
                                      "\\documentclass[border=2pt,varwidth]{standalone}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
"
                                    org-format-latex-header)))
    (funcall fn string tofile options buffer processing-type)))
#+END_SRC
** pdf2svg2png
#+BEGIN_SRC elisp
(add-to-list
 'org-preview-latex-process-alist
 '(pdf2svg2png :programs
           ("latex" "pdf2svg" "rsvg-convert" "convert")
           :description "pdf > svg > png" :message "you need to install the programs: latex and pdf2svg." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
           (1.5 . 1)
           :latex-compiler
           ("pdflatex -interaction nonstopmode -output-directory %o -shell-escape %f")
           :image-converter
           ("pdf2svg %f %O.svg"
            "rsvg-convert -d %D -p %D %O.svg -f png -o %O"
            "rm %O.svg")))
#+END_SRC
** HTML Export
*** tikz fix
#+begin_src elisp
(config! ox-html
  (defvar org-html-latex-non-numbered-environment '("tikzpicture"
                                                    "displaymath")
    "When converting org to html latex we automatically make enviroments
unnumbered (adding a * to the end of them). For example in

        \\begin{equation}
           ...
        \\end{equation}

`equation' will become `equation*'. Some environments aren't numbered and so
don't have a * equivalent and such environments should be in or added to this
list.
")

  (defun org-html--unlabel-latex-environment (latex-frag)
    "Change environment in LATEX-FRAG string to an unnumbered one.
For instance, change an 'equation' environment to 'equation*'."
    (let ((transform
           #'(lambda (s)
               (let ((env (match-string 1 s)))
                 (concat env
                         (unless (member env
                                         org-html-latex-non-numbered-environment)
                           "*"))))))
      (replace-regexp-in-string
       "\\`[ \t]*\\\\begin{\\([^*]+?\\)}"
       transform
       (replace-regexp-in-string "^[ \t]*\\\\end{\\([^*]+?\\)}[ \r\t\n]*\\'"
                                 transform
                                 latex-frag nil nil 1)
       nil nil 1)
      ))

  (defun org-html--latex-environment-numbered-p (element)
    "Non-nil when ELEMENT contains a numbered LaTeX math environment.
Starred and \"displaymath\" environments are not numbered."
    (let ((s (org-element-property :value element)))
      (save-match-data
        (string-match "\\`[ \t]*\\\\begin{\\([^*]+?\\)}" s)
        (let ((env (match-string 1 s)))
          (not (or (member env org-html-latex-non-numbered-environment)
                   (equal (substring env -1) "*"))))))))
#+end_src

** Footer
#+begin_src elisp
)
#+end_src
* Babel
:PROPERTIES:
:header-args+: :tangle config-org-babel.el
:END:
#+BEGIN_SRC elisp
(provide 'config-org-babel)
(config! org
#+END_SRC
** General
#+begin_src elisp
(setq  org-confirm-babel-evaluate nil)
#+end_src
** Define babel src blocks
#+BEGIN_SRC elisp
(defun define-ob--make-symbol (fmt sym)
  (intern (format fmt (symbol-name sym))))

;; Making an org babel definer (cause why not?)
(cl-defmacro define-ob! (name &key
                              execute
                              assign-variables
                              expand-body
                              prep-edit
                              prep-session
                              default-header-args
                              header-args
                              lang
                              file-ext)
  "TODO"
  (unless execute
    (error "Must at least provide a babel execute function."))

  `(let ((default-header-args ,default-header-args)
         (header-args ,header-args)
         (lang ,lang)
         (expand-body ,expand-body)
         (file-ext ,file-ext))

     (defun ,(define-ob--make-symbol "org-babel-execute:%s" name)
         (body params)
       (funcall ,execute body params))

     (when expand-body
       (defun ,(define-ob--make-symbol "org-babel-expand-body:%s" name)
         (body params)
       (funcall expand-body body params)))
     
     (when default-header-args
       (defvar ,(define-ob--make-symbol "org-babel-default-header-args:%s" name) default-header-args ""))

     (when header-args
       (defconst ,(define-ob--make-symbol "org-babel-header-args:%s" name) header-args ""))

     (when lang
       (add-to-list 'org-src-lang-modes (cons (symbol-name ',name) lang)))

     (when file-ext
       (add-to-list 'org-babel-tangle-lang-exts (cons (symbol-name ',name) file-ext)))))
#+END_SRC

*** cat
#+begin_src elisp
(define-ob! cat
  :execute (lambda (body params)
             (format body))
  :lang "text")
#+end_src
*** setup.el
#+begin_src elisp
(define-ob! setup-el
  :lang "emacs-lisp"
  :execute (lambda (body params)
    (org-babel-execute:emacs-lisp
     (org-babel-expand-body:setup-el body params)
     (list '(:lexical . "yes")
           `,@(assoc-delete-all :lexical params))))
  :expand-body (lambda (body params)
                 (when-let ((setup (alist-get :setup params)))
                   (let* ((keywords (mapcar #'car setup-macros))
                          (setup-keywords (seq-filter (lambda (x) (memq (car x) keywords)) params))
                          (setup-forms (mapcar (lambda (x)
                                                 (list (car x)
                                                       `,@(when-let ((form (cdr x)))
                                                            (if (stringp form)
                                                                (car (read-from-string form))
                                                              form))))
                                               setup-keywords)))
                     (format
                      (pp-to-string
                       `(setup ,(if (stringp setup)
                                    (car (read-from-string setup))
                                  setup)
                         ,@setup-forms
                         %s))
                      (org-babel-expand-body:emacs-lisp body params))))))
#+end_src

** Allowed languages
#+begin_src elisp
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)
      (emacs-lisp . t)))
#+end_src
** JIT elisp reference resolution
Adding a feature to babel, that lets me resolve ==(+ 2 2)= as a noweb reference (and it
executes the function). Likewise =#+CALL: ==(+ 2 2)= works and you can even include header
args like usual:  =#+CALL ==[:exports both](format "Hello!")=
#+begin_src elisp
(defun org-make-jit-elisp-lob (string-form)
  "Generate an elisp library of babel entry JIT.

This method does it's best to resolve the environment
in which it is executed."
  `(=
    "elisp"
    ,string-form
    ,(append
      '((:results . "replace")
       (:exports . "results") ;; Export results
       (:session . "none")
       (:cache . "no")
       (:noweb . "yes") ;; Most certainly allow noweb references magic^(magic^(magic))
       (:hlines . "no")
       (:tangle . "no")
       (:lexical . "no"))

      ;; Grab variables from the local env
      (seq-filter
       (lambda (x) (eq (car x) :var))
       (car (org-babel-params-from-properties "elisp"))))

    nil
    nil
    ,(point)
    "(ref:%s)"))


(defadvice! org-babel-ref-resolve-magic (fn ref)
  "Resolves REF when it is a lisp ref."
  :around #'org-babel-ref-resolve
  (save-match-data
    (let ((match-rx (rx line-start
                        (group
                         (or
                          (and "[" (zero-or-more not-newline) "]")
                          ""))
                        "("
                        (group
                         (zero-or-more not-newline))
                        ")" line-end)))

    (if (and (string-match match-rx ref)
             (not (equal (match-string 2 ref) "")))
        (let ((org-babel-current-src-block-location (point))
              (org-babel-library-of-babel (cons
                                           (org-make-jit-elisp-lob
                                            (format "(%s)" (match-string 2 ref)))
                                           org-babel-library-of-babel)))
          (funcall fn
                   (format "=%s()" (match-string 1 ref))))
      (funcall fn ref)))))

(defadvice! org-babel-lob-elisp-call-magic (fn &optional datum)
  :around #'org-babel-lob-get-info
  (let* ((context (or datum (org-element-context)))
         (type (org-element-type context))
         (reference (org-element-property :call context))
         (arguments (org-element-property :arguments context))
         (org-babel-library-of-babel org-babel-library-of-babel))
    (when (and (memq type '(babel-call inline-babel-call))
               (not reference) ;; nil reference means we didn't start w/ a string
               (stringp arguments)
               (not (equal arguments "")))
      (setq org-babel-library-of-babel (cons
                                        (org-make-jit-elisp-lob
                                         (format "(%s)" arguments))
                                        org-babel-library-of-babel))
      (setf (cadr context)
            (plist-put (cadr context) :arguments nil)
            (cadr context)
            (plist-put (cadr context) :call "=")))

    (funcall fn context)))

#+end_src
** Security
#+begin_src elisp
(defadvice! org-babel-execute-silence-a (fn &rest args)
  "Messages that are produced as a result of org-babel-execution
are unwanted. This silences (entirely) both `message' and `print'.
This is useful for security purposes.

If you're missing output then look no further :)"
  :around 'org-babel-execute-src-block
  (cl-letf (((symbol-function 'message) #'format)
            ((symbol-function 'print) #'identity))
    (apply fn args)))
#+end_src

#+RESULTS:

** Tangle 
Extended tangle is important as it allows more concise tangling
#+BEGIN_SRC elisp 
;; Possibly defer this on a command that gets run (like tangling)
(require 'ob-extended-tangle)
#+END_SRC


** Footer
#+begin_src elisp
)
#+end_src
* Links
#+BEGIN_SRC emacs-lisp :tangle config-org-links.el
(after! orglink
        (setq orglink-activate-in-modes '(prog-mode))
        (global-orglink-mode))
(provide 'config-org-links)
#+END_SRC

* Export
:PROPERTIES:
:header-args+: :tangle config-org-export.el
:END:
#+begin_src elisp
(provide 'config-org-export)
#+end_src
** General
#+begin_src elisp
(setq org-export-with-toc nil
      org-export-with-section-numbers nil
      org-export-time-stamp-file nil)

(config! ox-extra
    (ox-extras-activate '(ignore-headlines)))
#+end_src
** Latex
#+BEGIN_SRC elisp
(defvar org-compile-file--directory "./org-export/")

(defadvice! ox-file--inject-custom-output-directory (fn &rest args)
  "Beware! black magic ahead...

TODO Might create a 'double-advice' macro this is basically doing that..."
  :around '(org-latex-export-to-pdf)
  (let* ((filename-fn (symbol-function 'org-export-output-file-name))
         (filename-sub
          #'(lambda (extension &optional subtreep pub-dir)
              (let* ((filename (funcall filename-fn extension subtreep (or pub-dir
                                                                           org-compile-file--directory)))
                     (output-dir (file-name-directory filename)))
                (when (and output-dir
                         (not (file-directory-p output-dir)))
                  ;; This is relative.. so might need more care (might depend on default-directory)
                  (mkdir output-dir t))
                filename)
              )))
    (cl-letf (((symbol-function 'org-export-output-file-name) filename-sub))
      (apply fn args))))

#+END_SRC

* Remark
#+begin_src elisp :tangle config-org-remark.el
(after! org-remark
        (keymap! :map (evil-normal-state-map
                       evil-visual-state-map)
                 (:prefix "gm"
                          "m" #'org-remark-mark 
                          "o" #'org-remark-open
                          "x" #'org-remark-remove)
                 "]r" #'org-remark-view-next
                 "[r" #'org-remark-view-prev))

(provide 'config-org-remark)
#+end_src
** TODO Might play with different pens and customize coloring
See =org-remark-change= & =org-remark-create=
* User Interface
:PROPERTIES:
:header-args+: :tangle config-org-ui.el
:END:
#+BEGIN_SRC elisp
(provide 'config-org-ui)
(require 'config-ui)
#+END_SRC

#+BEGIN_SRC elisp
(config! org
  (set-face-attributes!
   (org-document-title        :height 1.5)
   (org-level-1               :height 1.1)
   (org-level-2               :height 1.05)
   (org-level-3               :height 1.025)
   (org-document-info-keyword :height 1.0))

  (setq org-startup-indented t
        org-display-inline-images t
        org-pretty-entities nil
        org-startup-with-inline-images "inlineimages"
        org-hide-emphasis-markers nil
        org-startup-folded 'overview
        ))
#+END_SRC
* Packages
** Org edit
Some functions that let me edit org-mode files better
#+begin_src elisp :tangle org-edit.el
(require 'org-element)
(require 'ob-core)
(provide 'org-edit)

(defun org-cleave ()
  "TODO"
  (interactive)
  (let* ((el (org-element-at-point))
         (el-type (car el))
         (post-affiliated (plist-get (nth 1 el) :post-affiliated)))
    (when (eq el-type 'src-block)
      (let ((src-begin-line (save-excursion
                              (goto-char post-affiliated)
                              (buffer-substring (point) (line-end-position)))))
        (end-of-line)
        (insert (format "\n#+END_SRC\n\n%s\n" src-begin-line))))))

(defun org-src-content-bounds (el)
  (list
   (save-mark-and-excursion
     (goto-char (org-element-property :post-affiliated el))
     (line-end-position))
   (save-mark-and-excursion
     (goto-char (1- (org-element-property :end el)))
     (forward-line (- (org-element-property :post-blank el)))
     (line-beginning-position))))

(defun org-block-header (el)
  (save-mark-and-excursion
    (goto-char (org-element-property :post-affiliated el))
    (buffer-substring (point) (line-end-position))))

(defun org-ensure-noweb ()
  (let* ((info (org-babel-get-src-block-info))
         (noweb (alist-get :noweb (nth 2 info))))
    (when (or (not noweb)
              (equal noweb "no"))
      (org-babel-insert-header-arg "noweb" "yes"))))
(defun org-extract (beg end name)
  "TODO"
  (interactive
   (list (region-beginning)
         (region-end)
         (read-string "Name: " (org-get-name))))

  (when (and beg end)
    (let ((el (org-element-at-point)))
      (when (and (eq (car el) 'src-block))
        (let* ((src-header (org-block-header el))
               (content-bounds (org-src-content-bounds el))
               (has-name (and name (not (equal name ""))))
               (region-contents (buffer-substring beg end)))
          (when (and (<= (car content-bounds) beg (cadr content-bounds))
                     (<= (car content-bounds) end (cadr content-bounds)))
            (setq deactivate-mark t)
            (evil-exit-visual-state)
            (delete-region beg end)
            (when has-name
              (save-excursion
                (end-of-line)
                (org-ensure-noweb)
                (insert "<<" name ">>")))

            (goto-char (cadr (org-src-content-bounds (org-element-at-point))))
            (insert
             (concat
              (when (eq (forward-line) 1)
                "\n")
              "\n"
              (when has-name
                (concat "#+NAME: " name "\n"))
              src-header
              "\n"
              region-contents)
             )
            (save-excursion
              (insert "\n\n#+END_SRC\n"))

            ))))))

(defun org-rename ()
  "TODO"
  nil)

(defun org-get-name ()
  (let ((el (org-outer-element)))
    (or (org-element-property :name el)
        (and (equal (org-element-property :key el) "NAME")
             (org-element-property :value el)))))

(defun org-set-name (name)
  (interactive
   (list (read-string "Name: " (org-get-name))))
  (let* ((el (org-outer-element))
         (el-type (car el))
         (existing-name (org-get-name)))
    (when (and el-type
               (or (not (memq el-type '(headline keyword)))
                   (and (eq el-type 'keyword)
                        (equal (org-element-property :key el) "NAME")))

               (save-excursion
                 (goto-char (org-element-property :begin el))

                 (unless existing-name
                   (beginning-of-line)
                   (save-excursion
                     (insert "#+NAME:\n")))

                 (if (or (null name) (equal name ""))
                     (delete-region (point) (1+ (line-end-position)))
                   (save-match-data
                     (re-search-forward (rx "#+NAME:"))
                     (delete-region (match-end 0) (line-end-position)))
                   (end-of-line)
                   (insert (concat " " name))))))))

#+end_src
** Org navigate
Collection of things that help me navigate org..
#+begin_src elisp :tangle org-navigate.el
(require 'org-element)
(require 'org)

(provide 'org-navigate)

(defun org-parent-property (property context)
  (when-let ((parent (org-element-property :parent context)))
    (org-element-property property parent)))

(defun org-inherited-property (property context)
  (or (org-element-property property context)
      (org-parent-property property context)))

(defun org-top-level-property (property context)
  (or (org-parent-property property context)
      (org-element-property property context)))

(defun org-outer-element (&optional context)
  (let* ((el (or context (org-element-at-point)))
         (parent (org-element-property :parent el)))
    (or parent el)))

(defun org-forward-to-narrowed-heading (arg)
  (interactive "p")
  (when (buffer-narrowed-p)
    (goto-char (point-min))
    (org-forward-heading-same-level arg)
    (widen))
  (org-forward-heading-same-level p)
  (org-narrow-to-subtree))

(defun org-backward-to-narrowed-heading (arg)
  (interactive "p")
  (org-forward-to-narrowed-heading (- arg)))
#+end_src
** Server Manager
:PROPERTIES:
:header-args+: :tangle org-server-manager.el
:END:
*** Mode
#+BEGIN_SRC elisp
(define-minor-mode org-server-manager-mode
  "TODO"
  :init-val nil
  :lighter ""
  :keymap (make-sparse-keymap))

(add-hook 'org-servers-file-open-hook #'org-server-manager-mode)
#+END_SRC

*** Connect to server
#+BEGIN_SRC elisp
(defun org-server-manager-ssh-connect (&optional arg)
  "Connect to the host at point and open `dired'.
If ARG is non-nil, open `eshell' instead of `dired'."
  (interactive "P")
  (let* ((properties (org-entry-properties))
         (name (alist-get "ITEM" properties nil nil #'string=))
         (user (alist-get "SSH_USER" properties nil nil #'string=))
         (port (alist-get "SSH_PORT" properties nil nil #'string=))
         (host (or (alist-get "IP" properties nil nil #'string=)
                   (alist-get "HOSTNAME" properties nil nil #'string=))))
    (if host
        (let ((default-directory (format "/ssh:%s%s%s:"
                                         (if user (format "%s@" user) "")
                                         host
                                         (if port (format "#%s" port) ""))))
          (message "Connecting to %s..." name)
          (if arg
              (eshell t)
            (dired ".")))
      (user-error "Not an SSH host"))))

#+END_SRC

*** Footer
#+BEGIN_SRC elisp
(provide 'org-server-manager)
#+END_SRC

