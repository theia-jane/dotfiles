#+TITLE: PDF
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}/.local/emacs/site-lisp
#+PROPERTY: header-args+ :tangle config-pdf.el

#+begin_src elisp
(provide 'config-pdf)
#+end_src
* PDF Tools
#+begin_src elisp
(after! pdf-tools
  ;;(pdf-tools-install)
  (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)
  (add-to-list 'auto-mode-alist
               '("\\.pdf" . pdf-view-mode))


  (setq-default pdf-view-display-size 'fit-width))

(keymap! :map pdf-view-mode-map
         :nv "C-d" #'pdf-view-next-page
         :nv "C-u" #'pdf-view-previous-page)

(after! org-pdftools
  (org-pdftools-setup-link))
#+END_SRC

** PDF View Mode
Adjusting visuals of =pdf-view-mode=, specifically the main goal is to make the
PDFs colors match my themes.
#+begin_src elisp
(add-hook 'pdf-view-mode-hook
          #'(lambda ()
            ;; Making 'midnight mode' into more of 'matches my theme mode'
            (setq pdf-view-midnight-colors (cons
                                            (face-attribute 'default :foreground)
                                            (face-attribute 'default :background))
                  ;; Fixes annoying blinking border (thanks doom-emacs!)
                  evil-normal-state-cursor '(nil))
            ;; Actually enable midnight mode
            (pdf-view-midnight-minor-mode)))


(defadvice! pdf-view-next-page--top (&rest _)
  "After we move to the next page, we should start at the top of the page."
  :after '(pdf-view-next-page
           pdf-view-next-page-command)
  (image-set-window-vscroll 0))
#+end_src
** Org
#+begin_src elisp
(after! (org-pdf-tools config-buffer)
  (defadvice! +pdf--org-open-links (fn &rest args)
    "Open PDFs in a vertical split, open one if none-exists and
don't do anything if the buffer is already displayed."
    :around 'org-pdftools-open-pdftools
    (let ((display-buffer-overriding-action '(buffer--display-in-vertical-split-maybe . nil)))
      (apply fn args))))
#+end_src

