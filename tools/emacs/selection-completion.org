#+TITLE: Selection / Completion
#+PROPERTY: header-args :tangle-relative 'dir :dir ${HOME}/.local/emacs/site-lisp :tangle config-selection-completion.el

#+begin_src elisp
(provide 'config-selection-completion)
#+END_SRC
* Orderless
Used for matching candidates in a completion framework. Works with standard emacs completion mechanisms (and 'higher' packages, like =ivy=).
#+begin_src elisp
(config! orderless
  (setq completion-styles '(orderless)
        orderless-component-separator " +"
        orderless-matching-styles '(orderless-prefixes
                                    orderless-literal
                                    orderless-strict-leading-initialism
                                    orderless-regexp
                                    orderless-flex)
        orderless-style-dispatchers '((lambda (p &rest _)
                                        (when (string-prefix-p "!" p)
                                          `(orderless-without-literal . ,(substring p 1))))
                                      (lambda (p &rest _)
                                        (when (string-suffix-p "=" p)
                                          `(orderless-literal . ,(substring p 0 -1))))))
  (keymap! :map minibuffer-local-completion-map
           "SPC"  nil))
#+end_src
* Minibuffer  
#+begin_src elisp
;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;; Enable recursive minibuffers
(setq enable-recursive-minibuffers t)
#+end_src
* Ivy
#+begin_src elisp
(config! ivy
  (ivy-mode)
  (setq ivy-read-action-function #'ivy-hydra-read-action
        ivy-height 13)
  (push '(swiper . 10) ivy-height-alist))

(config! ivy-rich
  (ivy-rich-mode)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src
** Counsel
#+begin_src elisp
(config! counsel
  (counsel-mode))
(config! counsel-projectile
  (defadvice! +counsel-projectile-switch-project--set-default-a (args)
    :filter-args #'counsel-projectile-switch-project
    (list (or (car args)
              #'counsel-projectile-switch-project-action-vc))))
#+end_src

* Embark
#+begin_src elisp
(config! embark
         (keymap!
          :g "H-SPC" #'embark-act
          :g "H-<return>" #'embark-dwim)))
   
'(config! '(which-key embark)
    (setq embark-action-indicator
        (lambda (map _target)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
        embark-become-indicator embar-action-indicator))
#+end_src

* TODO Consult
* Marginalia
#+begin_src elisp
(config! marginalia
  (marginalia-mode))
#+end_src
* Selectrum
#+begin_src elisp
(config! selectrum
  (selectrum-mode))
#+end_src
* Vertico
#+begin_src elisp
(config! vertico
    (vertico-mode 1)
    (keymap! :map vertico-map
                    "C-j" #'vertico-next
                    "C-k" #'vertico-previous)
) 
#+end_src
* Company
#+begin_src elisp
(config! company
    (add-hook 'after-init-hook 'global-company-mode))

#+end_src

* Corfu 
#+begin_src elisp
(config! corfu 
    (setq tab-always-indent 'complete)
    (corfu-global-mode 1)
    (keymap! :map corfu-map
                "C-j" #'corfu-next
                "C-k" #'corfu-previous))

#+end_src
