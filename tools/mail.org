#+TITLE: Mail
#+PROPERTY: header-args :tangle-relative 'dir
#+STARTUP: overview

To handle my mail I'll use =mbsync=, =mu=, and =pass= to handle fetching emails, indexing and storing my passwords and then in emacs I'll use mu4e to send email I'll use org-mode (via =org-mu4e=). My mail will live in this directory:

#+NAME: mailDir
#+begin_src text
~/.mail/
#+end_src

* Dependencies
#+NAME: Dependencies
- mbsync
- mu
- pass

#+BEGIN_SRC bash :var dependencies=Dependencies()
yay -S ${dependencies[@]}
#+END_SRC

* Setting up Gmail IMAP
** Enable IMAP
1. From the inbox: Navigate to the gear icon > Settings > Forwarding and POP/IMAP
2. Click "Enable IMAP"
** Get my email
:PROPERTIES:
:header-args+: :cache yes
:END:
Grab my email address from =pass=
#+NAME: personal-email-address
#+BEGIN_SRC bash
pass mail/mail.google.com | awk '/^username:/ {print $2}'
#+END_SRC

#+NAME: school-email-address
#+BEGIN_SRC bash
pass mail/boisestate.edu | awk '/^username:/ {print $2}'
#+END_SRC

** App Password
Rather than using my user password for Gmail I'm using my app password for
increased security, which I stored under =mail/imap.gmail.com=. To set that up you
can follow the following steps:

1. Go to your [[https://myaccount.google.com][Google Account]].
2. On the left navigation panel, choose Security.
3. On the "Signing in to Google" panel, choose App Passwords. If you don’t see this option:
   1. 2-Step Verification is not set up for your account.
   2. 2-Step Verification is set up for security keys only.
   3. Your account is through work, school, or other organization.
   4. You’ve turned on Advanced Protection for your account.
4. At the bottom, choose Select app and choose the app you’re using.
5. Choose Select device and choose the device you’re using.
6. Choose Generate.
7. Follow the instructions to enter the App Password. The App Password is the 16-character code in the yellow bar on your device.
8. Choose Done.


Note: if you have issues connecting or your app password is getting rejected you may need to [[https://www.google.com/accounts/DisplayUnlockCaptcha][unlock captcha]].
* Configure IMAP Syncing
:PROPERTIES:
:header-args:conf: :tangle .mbsyncrc :dir ${HOME}
:END:
The config for gmail is pretty much copy/paste. Reuse would be ideal.
** Gmail special folders
Helper to generate the special gmail folders for inclusion and exclusion depending on the channel
#+NAME: gmail-special-folders
#+begin_src elisp :var exclude='nil
(mapconcat
 (lambda (folder)
   (format "\"%s%s\""
           (if exclude "!" "")
           folder))
 '("Starred" "All Mail" "Sent Mail" "Trash" "Drafts")
 " ")
#+end_src

** Personal
*** Account information
#+BEGIN_SRC conf
IMAPAccount gmail-personal
Host imap.gmail.com
User <<personal-email-address()>>
PassCmd "pass mail/imap.gmail.com | head -1"
SSLType IMAPS
#+END_SRC

*** Remote storage
#+BEGIN_SRC conf
IMAPStore gmail-personal-remote
Account gmail-personal
#+END_SRC

*** Local storage
#+NAME: personalEmailDir
#+BEGIN_SRC text
<<mailDir>>gmail/
#+END_SRC

#+BEGIN_SRC conf
MaildirStore gmail-personal-local
Subfolders Verbatim
Path <<personalEmailDir>>
Inbox <<personalEmailDir>>Inbox
#+END_SRC

*** Folders (Channels)
**** Gmail's 'internal' folders
Gmail has some internal folders located under =[Gmail]=. Of specific interest to me are the folders like =All Mail= and =Trash=. I don't want to have these show up in =[Gmail]/= in my local mail (e.g. don't want =[Gmail]/Trash=). Instead we'll map the special folders I care about directly.
#+BEGIN_SRC conf
Channel gmail-personal-channel-special
Master :gmail-personal-remote:"[Gmail]/"
Slave :gmail-personal-local:
Patterns <<gmail-special-folders()>>
Create Both
SyncState *
#+END_SRC

**** All other folders
All other folders are of interest
#+BEGIN_SRC conf
Channel gmail-personal-channel
Master :gmail-personal-remote:
Slave :gmail-personal-local:
Patterns * ![Gmail]* <<gmail-special-folders[:var exclude='t]()>>
Create Both
SyncState *
#+END_SRC

** School
*** Account information
#+BEGIN_SRC conf
IMAPAccount gmail-school
Host imap.gmail.com
User <<school-email-address()>>
PassCmd "pass mail/boisestate.edu | head -1"
SSLType IMAPS
#+END_SRC

*** Remote storage
#+BEGIN_SRC conf
IMAPStore gmail-school-remote
Account gmail-school
#+END_SRC

*** Local storage
#+NAME: schoolEmailDir
#+BEGIN_SRC text
<<mailDir>>school/
#+END_SRC

#+BEGIN_SRC conf
MaildirStore gmail-school-local
Subfolders Verbatim
Path <<schoolEmailDir>>
Inbox <<schoolEmailDir>>Inbox
#+END_SRC

*** Folders (Channels)
**** Gmail's 'internal' folders
Gmail has some internal folders located under =[Gmail]=. Of specific interest to me are the folders like =All Mail= and =Trash=. I don't want to have these show up in =[Gmail]/= in my local mail (e.g. don't want =[Gmail]/Trash=). Instead we'll map the special folders I care about directly.
#+BEGIN_SRC conf
Channel gmail-school-channel-special
Master :gmail-school-remote:"[Gmail]/"
Slave :gmail-school-local:
Patterns <<gmail-special-folders()>>
Create Both
SyncState *
#+END_SRC

**** All other folders
All other folders are of interest
#+BEGIN_SRC conf
Channel gmail-school-channel
Master :gmail-school-remote:
Slave :gmail-school-local:
Patterns * ![Gmail]* <<gmail-special-folders[:var exclude='t]()>>
Create Both
SyncState *
#+END_SRC

* Auto-syncing
:PROPERTIES:
:header-args+: :dir ${HOME}/.config/systemd/user
:END:
I don't think these are actually being used.. I believe my =mail-sync= script is what's doing the magic..
** Sync service
Create the service which will sync email and then index it:
#+BEGIN_SRC conf :tangle mbsync.service
[Unit]
Description=Mailbox synchronization service

[Service]
Type=oneshot
ExecStart=/usr/bin/mbsync -Va
ExecStartPost=/usr/bin/mu index
#+END_SRC
** Sync timer
#+BEGIN_SRC conf :tangle mbsync.timer
[Unit]
Description=Mailbox synchronization timer

[Timer]
OnBootSec=2m
OnUnitActiveSec=5m
Unit=mbsync.service

[Install]
WantedBy=timers.target
#+END_SRC
* Initialize
1. With =mbsync= sufficiently configured we can now tangle the file
2. Make the directory where we'll store the email
    #+BEGIN_SRC bash
mkdir -p <<mailDir>>{gmail,school}
    #+END_SRC

3. Sync all =mbsync= channels
    #+BEGIN_SRC bash
mbsync -Va
    #+END_SRC
4. Index with =mu=
    #+BEGIN_SRC bash :var personal_email=personal-email-address() school_email=school-email-address()
mu init --maildir=<<mailDir>> --my-address=$personal_email --my-address=$school_email
mu index
    #+END_SRC

* Configure emacs mail client
I borrowed an awful lot of this config from doom-emacs to get me started.
#+BEGIN_SRC elisp :tangle config-email.el :dir ${HOME}/.local/emacs/site-lisp
(use-package mu4e
  :commands mu4e mu4e-compose-new
  :init
  (setq mu4e-maildir "<<mailDir>>")
  :config
  <<config/account>>
  <<config/sync>>
  <<config/appearances>>
  )

(use-package org-mu4e
  :hook (mu4e-compose-mode . org-mu4e-compose-org-mode)
  :config
  (setq org-mu4e-convert-to-html t
        org-mu4e-link-query-in-headers-mode nil)

  <<config/image-fix>>

  ;; Only render to html once. If the first send fails for whatever reason,
  ;; org-mu4e would do so each time you try again.
  (setq-hook! 'message-send-hook org-mu4e-convert-to-html nil))


(provide 'config-email)
#+end_src
** Accounts
#+NAME: config/account
#+BEGIN_SRC elisp
(setq mu4e-contexts `(,(make-mu4e-context
                        :name "personal"
                        :vars '((user-full-name         . "Theia Ware")
                                (user-mail-address      . "<<personal-email-address()>>")
                                (smtpmail-smtp-user     . "<<personal-email-address()>>")
                                (smtpmail-smtp-server   . "smtp.gmail.com")
                                (smtpmail-smtp-service  . 587)
                                (mu4e-sent-folder       . "/gmail/Sent Mail")
                                (mu4e-drafts-folder     . "/gmail/Drafts")
                                (mu4e-refile-folder     . "/gmail/All Mail")
                                (mu4e-trash-folder      . "/gmail/Trash")
                                (mu4e-compose-signature . "Theia Ware")))
                      ,(make-mu4e-context
                        :name "school"
                        :vars '((user-full-name         . "Theia Ware")
                                (user-mail-address      . "<<school-email-address()>>")
                                (smtpmail-smtp-user     . "<<school-email-address()>>")
                                (smtpmail-smtp-server   . "smtp.gmail.com")
                                (smtpmail-smtp-service  . 587)
                                (mu4e-sent-folder       . "/school/Sent Mail")
                                (mu4e-drafts-folder     . "/school/Drafts")
                                (mu4e-refile-folder     . "/school/All Mail")
                                (mu4e-trash-folder      . "/school/Trash")
                                (mu4e-compose-signature . "Theia Ware")))
                      ))
#+END_SRC
** Behavior
#+NAME: config/sync
#+BEGIN_SRC elisp
(setq mail-user-agent 'mu4e-user-agent
      mu4e-get-mail-command "mbsync -a"
      mu4e-change-filenames-when-moving t
      mu4e-update-interval nil
      mu4e-view-show-addresses t
      mu4e-compose-format-flowed t ; visual-line-mode + auto-fill upon sending
      mu4e-sent-messages-behavior 'sent
      mu4e-hide-index-messages t
      message-send-mail-function #'smtpmail-send-it
      smtpmail-stream-type 'starttls
      message-kill-buffer-on-exit t ; close after sending
      mu4e-confirm-quit nil
      mu4e-completing-read-function (cond
                                     ((featurep 'ivy) #'ivy-completing-read)
                                     (t #'completing-read))
      mu4e-context-policy 'pick-first
      mu4e-compose-context-policy 'ask-if-none)
#+END_SRC
** Appearances
#+NAME: config/appearances
#+BEGIN_SRC elisp
(setq mu4e-view-show-images t
      mu4e-view-image-max-width 800
      ;; mu4e-headers-fields
      ;; '((:account . 12)
      ;;   (:human-date . 12)
      ;;   (:flags . 4)
      ;;   (:from . 25)
      ;;   (:subject))

      mu4e-use-fancy-chars t
      mu4e-headers-draft-mark '("D" . "")
      mu4e-headers-flagged-mark '("F" . "")
      mu4e-headers-new-mark '("N" . "")
      mu4e-headers-passed-mark '("P" . "")
      mu4e-headers-replied-mark '("R" . "")
      mu4e-headers-seen-mark '("S" . "")
      mu4e-headers-trashed-mark '("T" . "")
      mu4e-headers-attach-mark '("a" . "")
      mu4e-headers-encrypted-mark '("x" . "")
      mu4e-headers-signed-mark '("s" . "")
      mu4e-headers-unread-mark '("u" . ""))
#+END_SRC
** SMTP
Note that in order for emails to be sent the password must be found in your auth source. I use [[file:pass.org::*Emacs integration][pass]] to store my passwords, which for sending mail requires that the password be stored in =smtp.domain.com/user@example.com=.
** Fix for images in emails
When the =org-preview-latex-image-directory= is set to an absolute path to the image is absolute. =org~mu4e-mime-replace-images= assumes that it's relative at the leads to it not finding the images. This fixes that. This should be pushed upstream to [[https://github.com/djcb/mu][mu]].
#+NAME: config/image-fix
#+BEGIN_SRC elisp
(defun org~mu4e-mime-replace-images (str current-file)
  "Replace images in html files STR in CURRENT-FILE with cid links."
  (let (html-images)
    (cons
     (replace-regexp-in-string ;; replace images in html
      "src=\"\\([^\"]+\\)\""
      (lambda (text)
        (format
         "src=\"cid:%s\""
         (save-match-data
           (let* ((url (and (string-match "src=\"\\([^\"]+\\)\"" text)
                            (match-string 1 text)))
                  (path (if (string-match "file://\\(.+\\)" url)
                            (match-string 1 url)
                          (expand-file-name
                           url (file-name-directory current-file))))
                  (ext (file-name-extension path))
                  (id (replace-regexp-in-string "[\/\\\\]" "_" path)))
             (cl-pushnew (org~mu4e-mime-file
                          (concat "image/" ext) path id)
                         html-images
                         :test 'equal)
             id))))
      str)
     html-images)))

(defadvice! org-mu4e-latex-fragments (fn latex-frag _processing-type info)
  :around 'org-html-format-latex
    (funcall fn latex-frag 'pdf2svg2png info))

(defadvice! org-mu4e-html-options (fn &rest args)
  :around 'message-send
  (let ((org-format-latex-options
  '(:html-foreground "Black" :html-background "White" :html-scale 1.5)))
    (apply fn args)))
#+END_SRC
*** TODO Get tikz working in emails
* Scripts
:PROPERTIES:
:header-args: :tangle-relative 'dir :dir ${HOME}/bin
:header-args:elisp: :shebang #!/usr/bin/env -S emacs -Q --script # -*- mode: emacs-lisp; lexical-binding: t; -*-
:END:
Script for syncing mail down from the server(s) and then indexing it
#+begin_src elisp :tangle mail-sync
(require 'commands-lib)
(while t
  (run-commands #'message
                "mbsync -a"
                "mu index")

 ;; GMail might freak out a little if you try to sync too often
  (sleep-for (* 10 60)))
#+end_src

