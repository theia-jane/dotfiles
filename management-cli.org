#+TITLE: Management CLI
#+STARTUP: overview

In short, I need a way to easily manage my literate config from the command line. These will all live under =bin/=. Here is a list of those commands:
- =config-tangle= :: generates the source files

* Tangle
:PROPERTIES:
:header-args: :tangle bin/config-tangle :tangle-relative 'dir :noweb yes :comments yes
:END:

This project will exclusively utilize emacs org-mode's capability to tangle files, which creates files based on the source code blocks within an =.org=. This is ultimately what enables [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].

To start we need to setup of the script to run using emacs-lisp.
#+BEGIN_SRC sh :shebang #!/usr/bin/env sh :comments no
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
#+END_SRC


We need to pull in the org babel library for tangling and Im adding extension to tangling, which enable choosing where relative tangle is based.
#+BEGIN_SRC elisp
(require 'ob-tangle)
<<conf-expand>>
<<org-babel/resolve-tangle-path>>
<<org-babel/load-namespaced-libraries>>
<<org-babel/tangle-dir>>
<<org-babel/var-table>>
#+END_SRC

Now we can tangle! The default behavior tangles files relatively to the org file being tangled. I don't want to litter my literate config with the output files. To accomplish that with the default behavior I have two options: use a bunch of =../../..= when naming the files I tangle /or/ using absolute file paths. I don't really like either options, so I'll be using my custom org-babel source header, =:tangle-relative= which let's enables me to specify where to tangle the file relatively.

For my literate config I want to have the default tangle directory to from the to be the root of this repository, which this will set up.
#+BEGIN_SRC elisp
(defvar config-root (with-temp-buffer
                      (shell-command "git rev-parse --show-toplevel" (current-buffer))
                      (replace-string "\n" "")
                      (buffer-string)))

(setq org-babel-default-header-args `((:session         . "none")
                                      (:noweb           . "yes")
                                      (:root-dir        . ,config-root)
                                      (:mkdirp          . "yes")
                                      (:tangle-relative . dir)
                                      (:tangle          . "no")
                                      (:comments        . "yes"))
      org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

I want my tangled scripts to automatically be executable, so I'll make sure it's executable when I save it.
#+begin_src elisp
(add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p)
#+end_src


Finally, actually tangle the files that in the =literate/= & =tools/=
#+BEGIN_SRC elisp

(defun config-file-filter (file)
  (string-match
   (rx line-start
       (eval (file-name-as-directory config-root))
       (or "literate/"
           "tools/"
           (and (+ (not "/")) ".org")))
   file))

(defun config-files ()
  (seq-filter
   #'config-file-filter
   (directory-files-recursively config-root "\\.org$")))

(defun config-tangle ()
  (let ((files (config-files)))
    (message "Tangling files: %s" files)
    (ob-with-global-lib
     (ob-lib-from-files files t (lambda (file)
                                  (setq file (string-remove-prefix (file-name-as-directory config-root) file))
                                  (string-remove-suffix ".org" file)))
     (ob-tangle-files files))))

(defun config-tangle ()
  (let ((files (config-files)))
    (message "Tangling files: %s" files)
    (ob-with-global-lib
     (ob-lib-from-files files t (lambda (file)
                                  (setq file (string-remove-prefix (file-name-as-directory config-root) file))
                                  (string-remove-suffix ".org" file)))
     (ob-tangle-files files))))

(config-tangle)

(kill-emacs 0)
#+END_SRC

#+RESULTS:

* Org babel
Some additions I've made to org-babel
** Library
#+NAME: org-babel/load-namespaced-libraries
#+BEGIN_SRC elisp
(require 'ob-lob)
(require 'subr-x)



(defmacro ob-with-lib (library &rest body)
  `(let ((org-babel-library-of-babel ,library))
     ,@body))

(defmacro ob-with-global-lib (&rest body)
  `(ob-with-lib org-babel-library-of-babel
                ,@body))

(defmacro ob-lib-changes (&rest body)
  `(ob-with-global-lib
    (let ((previous-lib org-babel-library-of-babel))
      ,@body
      (seq-difference org-babel-library-of-babel previous-lib))))

(defun ob-namespace-lib (namespace library)
  (mapcar
   (lambda (entry)
     (let* ((old-name (symbol-name (car entry)))
            (new-name (concat namespace "/" old-name)))
       (setf (car entry) (intern new-name)
             (nth 5 entry) new-name)
       entry))
   library))

(defun ob-lib-from-file (file &optional load namespace)
  (message "namespace %s" namespace)
  (let ((library (ob-lib-changes (org-babel-lob-ingest file))))
    (when namespace
      (setq library (ob-namespace-lib namespace library)))

    (when load
      (setq org-babel-library-of-babel (append
                                        library
                                        org-babel-library-of-babel)))
    library))

(defun ob-lib-from-files (files &optional load namespace-fn)
  ;; If there are no cycles in the dependencies (fileA -needs-> fileB -needs-> fileC -needs-> fileA)
  ;; then this is enough tries to ensure we load all the files. Eventually, we could get more sophisticated
  ;; in how we load src blocks as cyclic file dependency does not imply a cyclic src block dependency.
  ;; This is good enough for now
  (let* ((max-tries (length files))
         (retry-table (make-hash-table :test #'equal
                                       :size (length files)))
         (library
          (ob-lib-changes
           (while files
             (let* ((file (pop files))
                    (try-count (or (gethash file retry-table) 0)))
               (puthash file (1+ try-count) retry-table)
               (condition-case err
                   (progn
                     (ob-lib-from-file file t (funcall (or namespace-fn #'identity) file))
                     (message "Successfully loaded library from file: %s" file))
                 (t (message "Error when loading (%s): %s" file err)
                    (if (< try-count max-tries)
                        ;; Put in back on the end and hope what it needs can be loaded
                        (setq files (append files (list file)))
                      (user-error "Unable to resolve library references for %s after %s tries" file max-tries))))))
           (message "Finished loading %s libraries" (length files)))))

    (when load
      (setq org-babel-library-of-babel
            (append library org-babel-library-of-babel)))
    library))




(defun ob-lib-for-buffer ()
  (if-let* ((babel-library (cdr (assoc "babel-library"
                                       (append org-keyword-properties
                                               org-global-properties))))
            (babel-library (car (read-from-string (concat "(" babel-library ")")))))
      (let ((library org-babel-library-of-babel)
            include-dirs)
        (while babel-library
          (let ((arg (pop babel-library)))
            (pcase arg
              (:include-dir
               (when babel-library
                 (let (stop arg)
                   (while (and babel-library (not stop))
                     (setq arg (pop babel-library))
                     (cond ((keywordp arg)
                            (setq stop t)
                            (push arg babel-library))
                           ((eq arg 'project)
                            (when-let ((dir (projectile-project-root)))
                              (push dir include-dirs)))
                           ((and (stringp arg)
                                 (directory-name-p arg))
                            (push arg include-dirs))
                           ((symbolp arg)
                            (let ((dir (if (boundp arg)
                                           (symbol-value arg)
                                         (symbol-name arg))))
                              (when (and (stringp dir)
                                         (directory-name-p dir))
                                (push dir include-dirs))))
                           (t nil)))))))

            ;; (setq library
            ;;       (append
            ;;        (apply #'append (mapcar (lambda (dir)
            ;;                                  (ob-library-from-dir dir))
            ;;                                include-dirs))
            ;;        library))
            library)))))
#+END_SRC

#+RESULTS: org-babel/load-namespaced-libraries
: ob-lib-for-buffer
: ob-library-for-current-buffer

** Tangle
#+NAME: org-babel/resolve-tangle-path
#+BEGIN_SRC elisp
(defun org-babel--resolve-tangle-path-to-dir-a (fn &optional light datum)
  "Add :tangle-relative & :root-dir property to org babel header args.

The :tangle-relative property will make the :tangle files relative to
the :dir or to the value of :tangle-relative.

If :tangle-relative is
- equal to 'dir, then it uses :dir
- a string it uses the value passed

The :root-dir property can be used in conjunction with :tangle-relative.
if specified, then:
- if :dir has no value, the file is tangled relative to :root-dir
- if :dir has a value, but is an absolute path (unix), then :root-dir is ignored and the :dir is used for tangling
- if :dir has a value, but is not an absolute path (unix), then :root-dir and :dir are combined and the file is tangled to that path"
  (let ((info (funcall fn light datum)))
    (unless light
      (let* ((prop-alist (nth 2 info))
             (dir (substitute-env-vars (or (alist-get :dir prop-alist) "")))
             (root-dir (substitute-env-vars (or (alist-get :root-dir prop-alist) "")))
             (tangle (alist-get :tangle prop-alist))
             (tangle-relative (alist-get :tangle-relative prop-alist)))
        (when (and (stringp tangle)
                   (not (equal tangle "yes"))
                   (not (equal tangle "no"))
                   (not (string-prefix-p "/" tangle))
                   tangle-relative)
          (setf (alist-get :tangle prop-alist)
                (let ((directory (if (eq tangle-relative 'dir) dir "")))
                  (unless (null root-dir)
                    (setq directory (cond
                                     ((null directory) root-dir)
                                     ((string-prefix-p "/" directory) directory)
                                     (t (concat (file-name-as-directory root-dir) directory)))))

                  (let ((tangle-path (concat
                                      (file-name-as-directory directory)
                                      tangle)))
                    tangle-path))))))

    info))

(advice-add #'org-babel-get-src-block-info :around #'org-babel--resolve-tangle-path-to-dir-a)
#+END_SRC

#+RESULTS: org-babel/resolve-tangle-path

#+NAME: org-babel/tangle-dir
#+BEGIN_SRC elisp
(defun ob-tangle-files (files)
  (cl-loop for file
           in files
           do
           (message "Tangling file: %s" file)
           (org-babel-tangle-file file)))
#+END_SRC

#+RESULTS: org-babel/tangle-dir
: ob-tangle-files
* Conf var expand
#+NAME: conf-expand
#+BEGIN_SRC elisp
(defun org-babel-expand-body:conf (body params)
  "Expand BODY according to PARAMS, return the expanded body."
  (let ((vars (org-babel--get-vars params)))
    (message "%s" (pp-to-string vars))
    (if (null vars) (concat body "\n")
      (cl-loop for var in vars
               do
               (setq body (replace-regexp-in-string
                           (rx "${" (eval (prin1-to-string (car var))) "}")
                           (format "%s" (cdr var))
                           body)))
      body)))

(defalias 'org-babel-expand-body:json 'org-babel-expand-body:conf)
#+END_SRC
* Var Tables
Defining a bunch of vars can be a pain, so using a table is a great way to minimize that pain. This enables using =:var-table table-ref col1 col2=

#+NAME: org-babel/var-table
#+BEGIN_SRC elisp
(defun org-babel--var-table (fn &optional light datum)
  "TODO"
  (let ((info (funcall fn light datum)))
    (unless light
      (when-let* ((prop-alist (nth 2 info))
                  (var-table (alist-get :var-table prop-alist))
                  (var-table (split-string var-table " "))
                  (table-ref (car var-table))
                  (resolved-table (org-babel-ref-resolve table-ref))
                  (names-column (or (ignore-error
                                        (string-to-number (nth 1 var-table)))
                                    0))
                  (values-column (or (ignore-error
                                         (string-to-number (nth 2 var-table)))
                                     1))
                  (var-params
                   (seq-filter
                    (lambda (x) (eq :var (car x)))
                    (org-babel-process-params
                     (mapcar (lambda (row)
                               (cons :var (format "%s=%s"
                                                  (nth names-column row)
                                                  (nth values-column row))))
                             resolved-table)))))
        (setf (nth 2 info) (append prop-alist var-params))))
    info))

(advice-add #'org-babel-get-src-block-info :around #'org-babel--var-table)
#+END_SRC
