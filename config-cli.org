#+TITLE: Config CLI
#+PROPERTY: header-args:elisp :shebang #!/usr/bin/env -S emacs -Q --script # -*- mode: emacs-lisp; lexical-binding: t; -*-

This project will exclusively utilize emacs org-mode's capability to tangle files, which creates files based on the source code blocks within an =.org=. This is ultimately what enables [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].
* Bootstrap
#+NAME: bootstrap
#+begin_src elisp
(when (and (not (featurep 'config-android))
           (string-equal system-type "android"))
  <<tools/emacs/android/termux-integration>>)
#+end_src
* Main command
#+begin_src elisp :tangle bin/config
<<bootstrap>>
(defconst subcommands
  '(install
    tangle
    update
    test))

(defconst script-directory
  (replace-regexp-in-string "/[^/]+$" "" load-file-name))

(let ((subcommand (intern (car argv))))
  (when (and subcommand
             (memq subcommand subcommands))
    (catch 'exit
      (let* ((command (format "config-%s" subcommand))
             (p (start-process command nil command)))
        (set-process-sentinel p
                              (lambda (process signal)
                                (when (equal signal "finished\n")
                                  (throw 'exit nil))))
        (set-process-filter p (lambda (process output)
                                (message "%s"
                                         (replace-regexp-in-string "\n$" "" output))))
        (while (memq p (process-list))
          (sleep-for 1))))))
#+end_src
* Install
#+BEGIN_SRC elisp :tangle bin/config-install
(require 'org)
(require 'org-element)
(require 'ob-core)
(require 'ob-shell)

(defvar config-root (replace-regexp-in-string "bin/[^/]+$" "" load-file-name))
(setq org-confirm-babel-evaluate nil)
(dolist (file (directory-files-recursively config-root ".org$"))
  (with-temp-buffer
    (insert-file-contents file)
    (delay-mode-hooks (org-mode))
    (if (string-match-p "/install\\.org$" file)
        ;; execute the whole file if it's basename
        (org-babel-execute-buffer)
      ;; Search for subtrees called 'install'
      (org-map-entries
       (lambda ()
         (when (org-entry-properties (point) "config-install")
           (org-babel-execute-subtree)))))))
#+END_SRC

* Tangle
:PROPERTIES:
:header-args:elisp+: :tangle bin/config-tangle
:END:

We need to pull in the org babel library for tangling and an extension to tangling, which enables flexibility in relative tangling.
#+BEGIN_SRC elisp
<<bootstrap>>
(require 'subr-x)
(require 'rx)

(defvar config-root (replace-regexp-in-string "bin/[^/]+$" "" load-file-name))
(defvar config-dry-run nil)
(defvar config-clean nil)
(defvar config-tangle-exclude-patterns 
  '("README" "^tools/emacs/file-templates"))
(defvar config-tangle-include-patterns 
  `(,(rx line-start
         (or "literate/"
             "tools/"
             (and (+ (not "/")) ".org")))))

(while argv
  (setq arg (pop argv))
  (pcase arg
  ("--exclude" (when argv
    (add-to-list 'config-tangle-exclude-patterns (pop argv))))
  ("--include" (when argv
    (add-to-list 'config-tangle-include-patterns (pop argv))))
  ("--dry-run" (setq config-dry-run t))
  ("--clean" (setq config-clean t))
  (_ (message "Unknown argument: %s" arg))))

(require 'package-utils
         (concat config-root "tools/emacs/packages/package-utils/package-utils.el"))

(update-repo-load-path)

(require! ob-tangle
          ob-extended-tangle
          ob-text-var-expansion
          ob-load-namespaced-libraries
          ob-var-table
          notifications)
#+END_SRC

Turn on using cache
#+BEGIN_SRC elisp
(require 'obt-cache)
(setq obt-cache-enabled t
      obt-cache-store-path (concat config-root "/build/config-tangle-cache.el"))
(obt-cache-store-init config-clean)

(require 'ob-lob-cache)
(setq ob-lob-cache-enabled t
      ob-lob-cache-store-path (concat config-root "/build/config-lob-cache.el"))
(ob-lob-cache-store-init config-clean)
#+END_SRC

Now we can tangle! The default behavior tangles files relatively to the org file being tangled. I don't want to litter my literate config with the output files. To accomplish that with the default behavior I have two options: use a bunch of =../../..= when naming the files I tangle /or/ using absolute file paths. I don't really like either options, so I'll be using my custom org-babel source header, =:tangle-relative= which let's enables me to specify where to tangle the file relatively.

For my literate config I want to have the default tangle directory to from the to be the root of this repository, which this will set up.
#+BEGIN_SRC elisp
(setq org-babel-default-header-args `((:session         . "none")
                                      (:noweb           . "yes")
                                      (:root-dir        . ,config-root)
                                      (:mkdirp          . "yes")
                                      (:tangle-relative . dir)
                                      (:tangle          . "no")
                                      (:comments        . "yes")))
#+END_SRC


During tangling there are cases where a source block will be evaluated to get
some JIT information. (Such as a credential or system dependent thing)
#+BEGIN_SRC elisp
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)
      (emacs-lisp . t)))
#+END_SRC


I want my tangled scripts to automatically be executable, so I'll make sure it's executable when I save it.
#+begin_src elisp
(add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p)
#+end_src

Finally, actually tangle the files that in the =literate/= & =tools/=
#+BEGIN_SRC elisp
(defun config-file-filter (file)
  (and
   (not 
    (seq-reduce 
     (lambda (carry pattern) 
       (or carry (string-match-p pattern file)))
     config-tangle-exclude-patterns
     nil))
   (seq-reduce 
    (lambda (carry pattern) 
      (and carry (string-match-p pattern file)))
    config-tangle-include-patterns
    t)))

(defun config-files ()
  (seq-filter
   #'config-file-filter
   (mapcar 
    (apply-partially #'string-remove-prefix (file-name-as-directory config-root))
    (directory-files-recursively config-root "\\.org$"))))

(defun config-tangle ()
  (let ((default-directory config-root)
        (files (config-files)))
    (message "Tangling files: \n%s\n" 
             (mapconcat (apply-partially #'concat "  ") files "\n"))

    (if config-dry-run
        (message "This was a dry run. Nothing was tangled.")
      (with-ob-global-lib
       (ob-make-lib-from-files files t (apply-partially #'string-remove-suffix ".org"))
       (ob-tangle-files files))
      (notifications-notify :title "Config tangled"
                            :timeout 1500))))

(config-tangle)

(kill-emacs 0)
#+END_SRC
* Update
#+BEGIN_SRC elisp :tangle bin/config-update
<<bootstrap>>
(defvar config-root (replace-regexp-in-string "bin/[^/]+$" "" load-file-name))

(require 'notifications)
(let* ((default-directory config-root)
       (clean? (equal "\n" (shell-command-to-string "git status -u --porcelain=v2 | awk '{print $(NF)}'"))))
       (if clean?
             (shell-command-to-string "git pull && config-tangle")
           (notifications-notify
            :title "Skipping update"
            :body "Config not clean"
            :timeout 1500)))
#+END_SRC
* Test
** Test setup
:PROPERTIES:
:header-args: :dir ${HOME}/.local/test/config-install :comments no
:header-args:yaml: :var root=(shell-command-to-string "git rev-parse --show-toplevel | tr -d '\n'")
:END:
*** Image
I require git as a dependency, so making sure I have it
#+BEGIN_SRC text :tangle Dockerfile
FROM silex/emacs:master

RUN apt-get update && \
    apt-get install -y \
            git
#+END_SRC

*** Container
#+BEGIN_SRC yaml :tangle docker-compose.yml
version: '3'
services:
  server:
    build: .
    entrypoint: /root/test.sh
    volumes:
      - ${root}:/root/dotfiles
      - ./test.sh:/root/test.sh
#+END_SRC

*** Test
:PROPERTIES:
:header-args:bash: :tangle test.sh :shebang #!/bin/bash
:END:

Start by testing the tangle (mostly spot checking)
#+BEGIN_SRC bash
cd ${HOME}/dotfiles

ERROR_COUNT=0
_error() {
    echo "$1" > /dev/stderr
    ERROR_COUNT=$((ERROR_COUNT + 1))
}

echo "Testing config-tangle..."
./bin/config-tangle > /dev/null

if [ -z "$(ls "${HOME}/bin")" ]; then
    _error "Failed to tangle any scripts to ~/bin"
fi

if [ ! -f "${HOME}/.config/git/config" ]; then
    _error "Failed to tangle ~/.config/git/config"
fi

if [ "0" = "${ERROR_COUNT}" ]; then
    echo "Succeeded! No failures."
else
    _error "Failed ${ERROR_COUNT} tests"
fi
#+END_SRC
** Run test
#+BEGIN_SRC bash :tangle bin/config-test :shebang #!/bin/bash
cd ~/.local/test/config-install
docker-compose up
#+END_SRC
