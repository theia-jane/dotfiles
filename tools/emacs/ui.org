#+TITLE: UI
#+PROPERTY: header-args :tangle-relative 'dir
#+PROPERTY: header-args:elisp :tangle config-ui.el :dir ${HOME}/.local/emacs/site-lisp/

#+BEGIN_SRC elisp
(provide 'config-ui)
#+END_SRC
* Disable
I don't like the clutter of the menu, toolbar and scroll bar.
#+BEGIN_SRC elisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

I'd like to disable the startup screen and echo message 'site' wide... Generally not 'right', but I'm the only one using my system, so I'll break the rules by overwritting the functions.
#+BEGIN_SRC elisp
(defun fancy-startup-screen (&rest _))
(defun display-startup-echo-area-message (&rest _))
#+END_SRC

Turn off the bell
#+BEGIN_SRC elisp
(setq ring-bell-function #'ignore)
#+END_SRC

* Fonts
#+begin_src elisp
(let ((my-font (font-spec :family "Source Code Pro" :size 27)))
  (custom-set-faces
   `(fixed-pitch ((t (:font
                      ,(if (find-font my-font) my-font (font-spec :size 27))
                      :weight unspecified
                      :slant unspecified
                      :width unspecified))))))
#+end_src
* Non-program buffers
#+begin_src elisp
(defun ui/non-code--display-hook ()
  (setq display-line-numbers nil
        left-margin-width 5
        right-margin-width 5
        header-line-format " "
        evil-respect-visual-line-mode nil
        line-spacing 14
        fill-column 80)
  (pcase major-mode
    (org-mode (org-latex-preview-buffer)))
  (if (> (line-number-at-pos (point-max)) 1500)
      (pcase major-mode
        ;; Is there an earlier point I can set this up at? Seems like it isn't as effective as #+STARTUP: overview
        (org-mode (org-overview)))))

(add-hook 'org-mode-hook #'ui/non-code--display-hook)
#+end_src

* Program buffers
#+begin_src elisp
(defun ui/code--display-hook ()
  (setq line-spacing 7))
(add-hook 'prog-mode-hook #'ui/code--display-hook)
#+end_src

* Helpers
#+BEGIN_SRC elisp
(defmacro set-face-attributes! (&rest attributes-list)
  `(seq-do #'(lambda (attributes)
            (apply #'set-face-attribute (car attributes) nil (cdr attributes)))
          ',attributes-list))
#+END_SRC

* Themes
:PROPERTIES:
:header-args:elisp+: :tangle config-ui-themes.el
:END:

#+begin_src elisp
(provide 'config-ui-themes)
#+end_src
** Gruvbox
#+begin_src elisp
(config! gruvbox
  (load-theme 'gruvbox t))
#+end_src
